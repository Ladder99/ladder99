#!/usr/bin/env node
// note: uses python package https://github.com/rpdswtk/mqtt_recorder

const fs = require('fs')
const { execSync } = require('child_process')

if (!process.env.MODEL && process.argv.length < 3) {
  console.log(`
Usage: shell/replay MODEL

Replay MQTT recordings made with rpdswtk/mqtt_recorder.

MODEL  the name of the model subfolder containing a simulations
       folder with the set of csv files

e.g. shell/replay ccs-pa
`)
  process.exit(0)
}

const model = process.env.MODEL || process.argv[2] // eg 'ccs-pa'

const host = process.env.HOST || 'localhost'
const port = process.env.PORT || 1883
const pause = 2000 // ms

const modelsFolder = process.env.MODELS_FOLDER || 'models'
const folder = `${modelsFolder}/${model}/simulations`

const csvfiles = fs
  .readdirSync(folder)
  .filter(csvfile => csvfile.endsWith('.csv'))
  .sort((a, b) => a.localeCompare(b))

;(async function () {
  while (true) {
    for (const csvfile of csvfiles) {
      // can pass --loop true
      const cmd = `mqtt-recorder \
  --host ${host} \
  --port ${port} \
  --mode replay \
  --file ${folder}/${csvfile}`
      console.log(cmd)
      try {
        execSync(cmd)
      } catch (e) {
        // process.exit(1)
        console.log(`Retrying in ${pause / 1000} seconds...`)
        await new Promise(resolve => setTimeout(resolve, pause))
      }
    }
  }
})()
