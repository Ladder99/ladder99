# docker compose file for the complete ladder99 pipeline.
# can override these settings in setup-specific compose-overrides.yaml files.

# see ./start for how to run

# docker compose yaml version - must be a string
# see https://docs.docker.com/compose/compose-file/compose-file-v3
# note: a '3' here means '3.0'
# version: '3.7' # allows init keyword
version: '3.8'
# version: '3.9' # not tested yet

services:
  # adapter - convert machine data to shdr and send to agent
  adapter:
    container_name: adapter
    # image: ladder99/adapter:latest # use this if build docker image and push to hub
    build: ./adapter # see Dockerfile in this folder
    # set this to give permission to access hardware (e.g. dymo scale in usb port).
    #. security hole - leave off for now, until need dymo driver.
    # privileged: true
    profiles:
      - adapter
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      L99_MODULES_FOLDER: /data/modules
      L99_ADAPTER_FOLDER: /data/adapter
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
      - ../modules:/data/modules # has module yamls
      - ../$SETUP/volumes/adapter:/data/adapter # has json cookies for backfilling
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # agent - take in shdr and output xml/json/html
  agent:
    container_name: agent
    #. use mtconnect/agent once mtconnect publishes theirs to docker hub
    # see https://hub.docker.com/repository/docker/ladder99/agent for ours
    image: ladder99/agent:latest
    profiles:
      - agent
    working_dir: /data/agent
    # command: agent debug agent.cfg
    command: agent run agent.cfg
    volumes:
      - ../$SETUP/volumes/agent:/data/agent # should have agent.cfg, agent.xml
    ports:
      - 5000:5000
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # cloudbeaver - database web ui - more general than pgadmin
  cloudbeaver:
    container_name: cloudbeaver
    # need to use image OR build in client's compose-overrides.yaml.
    # (can't turn off a value with '' or null, so just commented both
    # image and build out).
    # see client-mazak for example of running cloudbeaver on x86.
    # see https://hub.docker.com/r/dbeaver/cloudbeaver/tags
    # image: dbeaver/cloudbeaver:21.3.5 # use this for x86 etc
    # build: ./cloudbeaver # use this for ARM processors - need to build with Dockerfile
    profiles:
      - cloudbeaver
    volumes:
      # - ../$SETUP/volumes/cloudbeaver/workspace:/opt/cloudbeaver/workspace
      - ../$SETUP/volumes/cloudbeaver/workspace:/var/cloudbeaver/workspace
    # need to leave this unspecified here, because clients that use traefik
    # need it that way, and there's no way to remove a port through 
    # overrides yet.
    # see https://github.com/docker/compose/issues/3729
    # IMPORTANT: might need to turn this on for a client.
    # ports:
    #   - 8978:8978
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # dozzle - manage docker logs
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    profiles:
      - dozzle
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # grafana - show real-time data from the database, handle notifications
  grafana:
    container_name: grafana
    image: grafana/grafana:8.2.2
    profiles:
      - grafana
      - dashboard
    # IMPORTANT: might need to turn this on for a client - see cloudbeaver comments.
    # ports:
    #   - $GRAFANA_PORT:3000/tcp
    environment:
      # need these for provisioning datasources.
      # null is a docker convention for passing values in through envars.
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
      # not used
      # INFLUXDB_DB:
      # INFLUXDB_USER:
      # INFLUXDB_PASSWORD:
      # grafana will download and install these automatically
      # https://grafana.com/docs/grafana/latest/installation/docker/#install-plugins-in-the-docker-container
      GF_INSTALL_PLUGINS: natel-discrete-panel,natel-plotly-panel,michaeldmoore-scatter-panel,dalvany-image-panel
    volumes:
      # note: grafana.ini is located in /etc/grafana by default -
      # other folders are specified there.
      - ../$SETUP/volumes/grafana/etc:/etc/grafana
      - ../$SETUP/volumes/grafana/var:/var/lib/grafana
      - ../dashboards/grafana:/etc/dashboards
    # as of v7.3, the Grafana Docker image runs with the root group (id 0) instead
    # of the grafana group (id 472), for better compatibility with OpenShift.
    # grafana gives permission error without user:root - not on mac. only on arm?
    # get this error when don't set user -
    # https://community.grafana.com/t/new-docker-install-with-persistent-storage-permission-problem/10896/13
    # setting this gives same error - why? `id -a` shows 1000
    # user: '1000:1000'
    # setting this gives error - UID and GID not set, but grafana works - why?
    # are blanks equivalent to root user?
    #. these could be set by ./start script?
    # user: '$UID:$GID'
    #. don't use this? how?
    user: root
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # meter - calculate metrics
  # note: set PGHOST, PGPORT, etc before running
  meter:
    container_name: meter
    build: ./meter
    profiles:
      - meter
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      # null means pass-through from environment
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml
      # - ../modules:/data/modules # has module-specific folders
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # mosquitto - get mqtt data from devices and publish to mtconnect adapter
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    profiles:
      - mosquitto
    ports:
      - 1883:1883
    volumes:
      - ../$SETUP/volumes/mosquitto/config:/mosquitto/config # has mosquitto.conf
      - ../$SETUP/volumes/mosquitto/data:/mosquitto/data
      - ../$SETUP/volumes/mosquitto/log:/mosquitto/log
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # nodered - a visual programming environment
  nodered:
    container_name: nodered
    image: nodered/node-red:2.1.6
    profiles:
      - nodered
    restart: always
    networks:
      - ladder99
    ports:
      - '1880:1880'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # note: have to `sudo chown pi:pi volumes/nodered/data` manually
      # for nodered to work. if don't, nodered will keep resetting and sending
      # messages over and over, flooding the mqtt adapter.
      #. any better way?
      - ../$SETUP/volumes/nodered/data:/data:rw
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '1m'

  # pgadmin - admin console for postgres database
  pgadmin:
    container_name: pgadmin
    image: biarms/pgadmin4:latest
    profiles:
      - pgadmin
    ports:
      - '5050:5050/tcp'
    restart: always
    networks:
      - ladder99
    deploy:
      restart_policy:
        condition: on-failure

  # play - playback device recordings
  play:
    container_name: play
    build: ./recorder
    profiles:
      - play
    command: recorder --mode play
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # portainer - docker container viewer/management
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    profiles:
      - portainer
    ports:
      - '9000:9000'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ../$SETUP/volumes/portainer/data:/data
    restart: always
    networks:
      - ladder99
    logging:
      driver: 'none'

  # postgres - store structure and time-series data
  postgres:
    container_name: postgres
    image: timescale/timescaledb:2.3.0-pg13
    profiles:
      - postgres
      - dashboard
    # IMPORTANT: client might need to add this in compose-overrides.yaml
    # ports:
    #   - $PGPORT:5432/tcp
    # re PGPASSWORD,
    #   don't use PGPASSWORD? see https://stackoverflow.com/a/6405162/243392
    #   instead use a .pgpass file https://www.postgresql.org/docs/9.1/libpq-pgpass.html
    #   but PGPASSWORD's deprecation is contested -
    #   see https://stackoverflow.com/questions/6523019/postgresql-scripting-psql-execution-with-password
    # the PostgreSQL image uses these environment variables.
    # note: POSTGRES_PASSWORD is REQUIRED.
    # the first time this is run (and the data directory is empty), it uses 
    # these envars to initialize the database. 
    # to change the db password would require an ALTER USER SQL statement, 
    # or \password in psql.
    # see https://hub.docker.com/_/postgres
    environment:
      POSTGRES_DB: $PGDATABASE
      POSTGRES_USERNAME: $PGUSER
      POSTGRES_PASSWORD: $PGPASSWORD
    volumes:
      - ../$SETUP/volumes/postgres/data:/var/lib/postgresql/data
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # record - record device messages for future playback
  record:
    container_name: record
    build: ./recorder
    profiles:
      - record
    command: recorder --mode record
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      L99_MODULES_FOLDER: /data/modules
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # relay - fetch data from agent and send to db
  relay:
    container_name: relay
    build: ./relay
    profiles:
      - relay
      - dashboard
    init: true
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      # override these as needed in client's compose-overrides.yaml
      AGENT_ENDPOINTS: http://agent:5000
      #. will need to boost this as number of devices increases,
      # until have automatic rate setting
      FETCH_INTERVAL: 2000
      FETCH_COUNT: 800
      # null means pass-through from environment
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
    # this fixes a problem on ubuntu - works on mac okay also
    #. but not on friendlywrt - host-gateway doesn't exist, or need docker>=20.10
    # see https://stackoverflow.com/a/67158212/243392
    # and https://docs.docker.com/compose/compose-file/compose-file-v3/#extra_hosts
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: always
    networks:
      - ladder99
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
    logging:
      options:
        max-size: '20m'
  # superset - a sql-based dashboard application

  # traefik - a reverse proxy
  # will need to add labels to grafana or other service you want to expose -
  # see client-mazak/compose-overrides.yaml or client-oxbox for examples.
  traefik:
    image: traefik:v2.5.3
    container_name: traefik
    profiles:
      - traefik
    ports:
      - 80:80/tcp
      - 443:443/tcp
    volumes:
      # will need to do this before starting traefik -
      #   mkdir ../client-oxbox/volumes/traefik
      #   chmod 600 ../client-oxbox/volumes/traefik/acme.json
      - /var/run/docker.sock:/var/run/docker.sock
      - ../$SETUP/volumes/traefik/traefik.toml:/traefik.toml
      - ../$SETUP/volumes/traefik/traefik_dynamic.toml:/traefik_dynamic.toml
      - ../$SETUP/volumes/traefik/acme.json:/acme.json
    networks:
      - ladder99

networks:
  ladder99:
    name: ladder99
