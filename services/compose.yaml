# docker compose file for the complete ladder99 pipeline.
# can override these settings in setup-specific compose-overrides.yaml files.

# see ./start for how to run

# docker compose yaml version - must be a string
# see https://docs.docker.com/compose/compose-file/compose-file-v3
# note: a '3' here means '3.0'
version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # adapter
  # ---------------------------------------------------------------------------
  # convert machine data to shdr and send to agent
  adapter:
    container_name: adapter
    # image: ladder99/adapter:latest # use this if build docker image and push to hub
    build: ./adapter # see Dockerfile in this folder
    # set this to give permission to access hardware (e.g. dymo scale in usb port).
    #. security hole - leave off for now, until need dymo driver.
    # privileged: true
    profiles:
      - adapter
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      L99_MODULES_FOLDER: /data/modules
      L99_ADAPTER_FOLDER: /data/adapter
      # turn on feedback driver - eg for production machine only.
      # null means pass-through from environment.
      L99_FEEDBACK: null
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
      - ../modules:/data/modules # has module yamls
      - ../$SETUP/volumes/adapter:/data/adapter # has json cookies for backfilling
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # agent
  # ---------------------------------------------------------------------------
  # take in shdr and output xml/json/html
  agent:
    container_name: agent
    #. use mtconnect/agent once mtconnect publishes theirs to docker hub
    # see https://hub.docker.com/repository/docker/ladder99/agent for ours
    image: ladder99/agent:1.7.0.3-0.1.2
    # image: ladder99/agent:latest # this will be agent2.0 soon
    # image: ladder99/agent:2.0.0.7
    profiles:
      - agent
    working_dir: /data/agent
    command: agent run agent.cfg
    # command: agent debug agent.cfg
    volumes:
      - ../$SETUP/volumes/agent:/data/agent # should have agent.cfg, agent.xml
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - 5000:5000
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # backup
  # ---------------------------------------------------------------------------
  # automatic/scheduled backup of database
  # see https://github.com/offen/docker-volume-backup
  backup:
    container_name: backup
    image: offen/docker-volume-backup:latest
    profiles:
      - backup
    restart: always
    networks:
      - ladder99
    volumes:
      # By default a container based on this image will run in the UTC timezone. 
      # In case you want to run your cron rules in your local timezone (respecting DST), 
      # you can mount your Docker host's /etc/timezone and /etc/localtime:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      #
      # without this backup doesn't communicate with other services properly (?)
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #
      # By default, the `/backup` directory inside the container will be backed up.
      # In case you need to use a custom location, set `BACKUP_SOURCES`.
      - backup:/backup # a docker volume - see postgres service and end of this file
      #
      # If you mount a local directory or volume to `/archive`, a local
      # copy of the backup will be stored there.
      - ../$SETUP/volumes/backup:/archive:rw
      #
      # NOTE: see postgres service labels for pre and post commands etc
      #
    environment:
      # NOTE: null values are set in .env - keep out of repo
      #
      # The name of the backup file including the `.tar.gz` extension.
      # IMPORTANT: override this in client's compose-overrides.yaml with client name!
      BACKUP_FILENAME: backup-CLIENT-%Y-%m-%dT%H-%M-%S.tar.gz
      BACKUP_PRUNING_PREFIX: backup-CLIENT-
      #
      # Setting BACKUP_FILENAME_EXPAND to true allows for environment variable
      # placeholders in BACKUP_FILENAME, BACKUP_LATEST_SYMLINK and in
      # BACKUP_PRUNING_PREFIX that will get expanded at runtime,
      # Please note that you will need to escape the `$` when providing the value
      # in a docker-compose.yml file, i.e. using $$VAR instead of $VAR.
      # note: the envar must be set BEFORE this compose yaml file is read. 
      # note: must be 'true', not true
      # BACKUP_FILENAME_EXPAND: 'true'
      #
      # pruning
      # In case your target bucket or directory contains other files than the ones
      # managed by this container, you can limit the scope of rotation by setting
      # a prefix value. This would usually be the non-parametrized part of your
      # BACKUP_FILENAME. E.g. if BACKUP_FILENAME is `db-backup-%Y-%m-%dT%H-%M-%S.tar.gz`,
      # you can set BACKUP_PRUNING_PREFIX to `db-backup-` and make sure
      # unrelated files are not affected by the rotation mechanism.
      # (ie it'll prune only file starting with this prefix)
      BACKUP_RETENTION_DAYS: 7
      # BACKUP_CRON_EXPRESSION: '0 7 * * *' # 7am gmt ~ 1am cst
      BACKUP_CRON_EXPRESSION: '0 1 * * *' # 1am local time (cst)
      #
      # cloud backup
      AWS_ENDPOINT: nyc3.digitaloceanspaces.com
      AWS_S3_BUCKET_NAME: ladder99
      AWS_ACCESS_KEY_ID: null
      AWS_SECRET_ACCESS_KEY: null
      # AWS_S3_PATH: backup/client # don't use this - causes probs with local backups
      #
      # slack notifications
      NOTIFICATION_URLS: null
      NOTIFICATION_LEVEL: info

    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # cloudbeaver
  # ---------------------------------------------------------------------------
  # database web ui - more general than pgadmin
  cloudbeaver:
    container_name: cloudbeaver
    # need to use image OR build in client's compose-overrides.yaml.
    # (can't turn off a value with '' or null (?), so just commented both
    # image and build out).
    # see client-mazak for example of running cloudbeaver on x86.
    # see https://hub.docker.com/r/dbeaver/cloudbeaver/tags
    image: dbeaver/cloudbeaver:21.3.5 # use this for x86 etc
    # build: ./cloudbeaver # use this for ARM processors - need to build with Dockerfile
    profiles:
      - cloudbeaver
    volumes:
      # - ../$SETUP/volumes/cloudbeaver/workspace:/opt/cloudbeaver/workspace
      - ../$SETUP/volumes/cloudbeaver/workspace:/var/cloudbeaver/workspace
      # need to leave this unspecified here, because clients that use traefik
      # need it that way, and there's no way to remove a port through 
      # overrides yet.
      # see https://github.com/docker/compose/issues/3729
      # IMPORTANT: might need to turn this on for a client.
      # ports:
      #   - 8978:8978
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # dozzle
  # ---------------------------------------------------------------------------
  # ui for docker logs
  dozzle:
    container_name: dozzle
    #. add a version tag
    image: amir20/dozzle:latest
    profiles:
      - dozzle
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # grafana
  # ---------------------------------------------------------------------------
  # show real-time data from the database, handle notifications
  #. can't upgrade beyond 8.3.5 yet - need to fix teleport/traefik settings
  # see https://github.com/grafana/grafana/issues/45117
  # see https://grafana.com/tutorials/run-grafana-behind-a-proxy/#configure-traefik
  # see https://goteleport.com/docs/application-access/getting-started/
  grafana:
    container_name: grafana
    image: grafana/grafana:8.2.2
    # image: grafana/grafana:9.3.2 #. get 'Origin not allowed' error on dash
    profiles:
      - grafana
    # IMPORTANT: might need to turn this on for a client - have to comment it
    # out here because a client might need no ports exposed.
    #. can you do that by setting grafana_port to nothing?
    # see cloudbeaver comments.
    ports:
      - '$GRAFANA_PORT:3000/tcp'
    environment:
      # need these for provisioning datasources.
      # null is a docker convention for passing values in through envars.
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
      # not used
      # INFLUXDB_DB:
      # INFLUXDB_USER:
      # INFLUXDB_PASSWORD:
      # grafana will download and install these automatically
      # https://grafana.com/docs/grafana/latest/installation/docker/#install-plugins-in-the-docker-container
      GF_INSTALL_PLUGINS: natel-discrete-panel,natel-plotly-panel,michaeldmoore-scatter-panel,dalvany-image-panel
      # GF_INSTALL_PLUGINS: natel-discrete-panel,natel-plotly-panel,michaeldmoore-scatter-panel,dalvany-image-panel,volkovlabs-form-panel
    volumes:
      # note: grafana.ini is located in /etc/grafana by default -
      # other folders are specified there.
      - ../$SETUP/volumes/grafana/etc:/etc/grafana
      - ../$SETUP/volumes/grafana/var:/var/lib/grafana
      - ../dashboards/grafana:/etc/dashboards
      # as of v7.3, the Grafana Docker image runs with the root group (id 0) instead
      # of the grafana group (id 472), for better compatibility with OpenShift.
      # grafana gives permission error without user:root - not on mac. only on arm?
      # get this error when don't set user -
      # https://community.grafana.com/t/new-docker-install-with-persistent-storage-permission-problem/10896/13
      # setting this gives same error - why? `id -a` shows 1000
      # user: '1000:1000'
      # setting this gives error - UID and GID not set, but grafana works - why?
      # are blanks equivalent to root user?
      #. these could be set by ./start script?
      # user: '$UID:$GID'
      #. don't use this? how?
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    user: root
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # hue
  # ---------------------------------------------------------------------------
  # sql database ui
  hue:
    container_name: hue
    # https://hub.docker.com/r/gethue/hue
    # image: gethue/hue:latest
    image: gethue/hue:20220302-140101 # prefer a fixed version so doesn't keep downloading
    profiles:
      - hue
    # ports:
    #   - "8888:8888"
    dns: 8.8.8.8
    volumes:
      #. why z-hue.ini? is it an arbitrary name for hue-overrides.ini?
      # https://stackoverflow.com/questions/57116402/hue-access-to-hdfs-bypass-default-hue-ini
      - ../$SETUP/volumes/hue/hue.ini:/usr/share/hue/desktop/conf/z-hue.ini
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # logzio-logs
  # ---------------------------------------------------------------------------
  # monitor docker logs with logz.io
  logzio-logs:
    container_name: logzio-logs
    #. add a version tag
    image: logzio/docker-collector-logs
    profiles:
      - logzio-logs
    environment:
      LOGZIO_TOKEN: $LOGZIO_TOKEN
      LOGZIO_TYPE: docker_logs
      LOGZIO_CODEC: json
      skipContainerName: cloudbeaver,dozzle,hue,logzio-logs,pgadmin,portainer,traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/docker/containers:/var/lib/docker/containers
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # meter
  # ---------------------------------------------------------------------------
  # calculate metrics
  # note: set PGHOST, PGPORT, etc before running
  meter:
    container_name: meter
    build: ./meter
    profiles:
      - meter
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      # null means pass-through from environment
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml
      # - ../modules:/data/modules # has module-specific folders
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # mosquitto
  # ---------------------------------------------------------------------------
  # get mqtt data from devices and publish to mtconnect adapter
  # see https://hub.docker.com/_/eclipse-mosquitto
  # and https://mosquitto.org/
  # the image defines three directories in /mosquitto - config, data, log
  mosquitto:
    container_name: mosquitto
    #. add a version tag
    image: eclipse-mosquitto
    profiles:
      - mosquitto
    ports:
      - 1883:1883
    volumes:
      - ../$SETUP/volumes/mosquitto/config:/mosquitto/config # has mosquitto.conf
      - ../$SETUP/volumes/mosquitto/data:/mosquitto/data
      - ../$SETUP/volumes/mosquitto/log:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    # see https://kossy0701.medium.com/what-is-tty-true-in-docker-compose-yml-47a72891aee2
    tty: true
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # nodered
  # ---------------------------------------------------------------------------
  # a visual programming environment
  nodered:
    container_name: nodered
    image: nodered/node-red:2.1.6
    profiles:
      - nodered
    restart: always
    networks:
      - ladder99
    ports:
      - '1880:1880'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # note: have to `sudo chown pi:pi volumes/nodered/data` manually
      # for nodered to work. if don't, nodered will keep resetting and sending
      # messages over and over, flooding the mqtt adapter.
      #. any better way?
      - ../$SETUP/volumes/nodered/data:/data:rw
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '1m'

  # ---------------------------------------------------------------------------
  # pgadmin
  # ---------------------------------------------------------------------------
  # admin console for postgres database
  #. haven't been able to get dpage/pgadmin4 to work, though it's more up-to-date
  # note: must set permissions for volumes/pgadmin directory - eg
  #   sudo chown -R 1000:50 ../setup-oxbox/volumes/pgadmin # for biarms/pgadmin4
  #   sudo chown -R 5050:5050 ../setup-oxbox/volumes/pgadmin # for dpage/pgadmin4
  # see https://www.pgadmin.org/docs/pgadmin4/development/container_deployment.html#mapped-files-and-directories
  pgadmin:
    container_name: pgadmin
    image: biarms/pgadmin4:4.21 # see https://hub.docker.com/r/biarms/pgadmin4
    # image: dpage/pgadmin4:6.11 # see https://hub.docker.com/r/dpage/pgadmin4
    profiles:
      - pgadmin
    ports:
      - '5050:5050/tcp' # for biarms/pgadmin4
      # - '5050:80' # for dpage/pgadmin4
    volumes:
      # for dpage/pgadmin4
      - ../$SETUP/volumes/pgadmin:/pgadmin
      # - ../$SETUP/volumes/pgadmin/config:/pgadmin/config
      # for dpage/pgadmin4
      # - ../$SETUP/volumes/pgadmin:/var/lib/pgadmin
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      # for dpage/pgadmin4
      PGADMIN_DEFAULT_EMAIL: null
      PGADMIN_DEFAULT_PASSWORD: null
    restart: always
    networks:
      - ladder99
    deploy:
      restart_policy:
        condition: on-failure
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # play
  # ---------------------------------------------------------------------------
  # playback device recordings - uses the recorder service
  play:
    container_name: play
    build: ./recorder
    profiles:
      - play
    command: recorder --mode play
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # portainer
  # ---------------------------------------------------------------------------
  # docker container viewer/management
  portainer:
    container_name: portainer
    #. add a version tag
    image: portainer/portainer-ce
    profiles:
      - portainer
    ports:
      - '9000:9000'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ../$SETUP/volumes/portainer/data:/data
    restart: always
    networks:
      - ladder99
    logging:
      driver: 'none'

  # ---------------------------------------------------------------------------
  # postgres
  # ---------------------------------------------------------------------------
  # store structure and time-series data
  postgres:
    container_name: postgres
    image: timescale/timescaledb:2.7.0-pg13
    #. still not sure tz is needed - see https://stackoverflow.com/a/38503436/243392
    # command: postgres -c 'max_connections=50' -c 'timezone=America/Chicago'
    command: postgres -c 'max_connections=50' # need for grafana pages with lots of queries
    profiles:
      - postgres
    ports:
      - $PGPORT:5432/tcp
    #
    # the PostgreSQL image uses these environment variables.
    # re PGPASSWORD,
    #   see https://stackoverflow.com/a/6405162/243392
    #   use a .pgpass file? https://www.postgresql.org/docs/9.1/libpq-pgpass.html
    #   but PGPASSWORD's deprecation is contested -
    #   see https://stackoverflow.com/questions/6523019/postgresql-scripting-psql-execution-with-password
    environment:
      POSTGRES_DB: $PGDATABASE
      POSTGRES_USERNAME: $PGUSER
      # note: POSTGRES_PASSWORD is REQUIRED.
      # the first time this is run (and the data directory is empty), it uses 
      # these envars to initialize the database. 
      # to change the db password would require an ALTER USER SQL statement, 
      # or \password in psql.
      # see https://hub.docker.com/_/postgres
      POSTGRES_PASSWORD: $PGPASSWORD
      # # note: we need PGDATA for Windows so can point to a subdirectory of the mount folder.
      # # otherwise get error saying unable to set permissions on the folder.
      # # put here so it's consistent across platforms.
      # # see https://lifesaver.codes/answer/chmod-changing-permissions-of-var-lib-postgresql-data-permission-denied-116
      # PGDATA: /var/lib/postgresql/data/pgdata
      # that didn't work. but can use wsl terminal to run ./start ?
      # see https://github.com/bitnami/bitnami-docker-postgresql/issues/237#issuecomment-672249407
      # and https://stackoverflow.com/questions/66753829/how-to-move-workspacea-simple-project-from-windows-file-system-mnt-to-linu
      # this seems to work, to use a subdir
    volumes:
      - ../$SETUP/volumes/postgres/data:/var/lib/postgresql/data
      - backup:/backup # a docker volume - see backup service and end of this file
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    labels:
      # see backup service for more settings
      # - 'docker-volume-backup.stop-during-backup=false'
      # note: we always write to the same filename
      - "docker-volume-backup.exec-pre=/bin/sh -c 'pg_dumpall -U $PGUSER --clean --file /backup/dumpall.sql'"
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # postgrest
  # ---------------------------------------------------------------------------
  # expose postgres data via REST API
  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:v10.1.1
    ports:
      - '3010:3000'
    profiles:
      - postgrest
    environment:
      PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
      PGRST_DB_URI: postgres://authenticator:$PGAUTHPASSWORD@postgres:$PGPORT/$PGDATABASE
      # The database role to use when no client authentication is provided. Should differ from authenticator
      PGRST_DB_ANON_ROLE: anon_user
      # Comma (and space) separated list of all schemas postgrest has access to
      PGRST_DB_SCHEMAS: setup
      # The secret to verify the JWT for authenticated requests with.
      # Needs to be at least 32 characters minimum.
      PGRST_JWT_SECRET: null
      # PGRST_SECRET_IS_BASE64: 'False' # must be string, number, or null
      # depends_on:
      #   - postgres
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # record
  # ---------------------------------------------------------------------------
  # record device messages for future playback
  record:
    container_name: record
    build: ./recorder
    profiles:
      - record
    command: recorder --mode record
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      L99_MODULES_FOLDER: /data/modules
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # relay
  # ---------------------------------------------------------------------------
  # fetch data from agent and send to db
  relay:
    container_name: relay
    build: ./relay
    profiles:
      - relay
    # this runs a process manager that passes SIGTERM to your app gracefully
    # see https://maximorlov.com/process-signals-inside-docker-containers/
    init: true
    environment:
      # specify where code can find data.
      # can override at run time, eg to run service on windows with node.
      L99_SETUP_FOLDER: /data/setup
      # this can be an agent url, a comma-separated (no spaces) list of urls,
      # or a .txt file with a url per line.
      # NO TRAILING SLASHES
      #. make this an array? but this is an envar so must be a string
      # override as needed in client's compose-overrides.yaml.
      AGENT_ENDPOINTS: http://agent:5000
      #. will need to boost this as number of devices increases,
      # until have automatic rate setting
      FETCH_INTERVAL: 2000
      FETCH_COUNT: 800
      # null means pass-through from environment
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
    # this fixes a problem on ubuntu - works on mac okay also
    #. but not on friendlywrt - host-gateway doesn't exist, or need docker>=20.10
    # see https://stackoverflow.com/a/67158212/243392
    # and https://docs.docker.com/compose/compose-file/compose-file-v3/#extra_hosts
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: always
    networks:
      - ladder99
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    logging:
      options:
        max-size: '20m'

  # ---------------------------------------------------------------------------
  # sematext
  # ---------------------------------------------------------------------------
  # send logs to sematext.com for monitoring
  sematext:
    #. add a version tag
    image: sematext/agent:latest
    container_name: sematext
    profiles:
      - sematext
    environment:
      - INFRA_TOKEN=$INFRA_TOKEN # set this in .env file
      - SERVER_BASE_URL=https://spm-receiver.sematext.com
      - LOGS_RECEIVER_URL=https://logsene-receiver.sematext.com
      - EVENT_RECEIVER_URL=https://event-receiver.sematext.com
      - COMMAND_SERVER_URL=https://command.sematext.com
    cap_add:
      - SYS_ADMIN
    restart: always
    volumes:
      - /:/hostfs:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - /var/run/:/var/run
      - /sys/kernel/debug:/sys/kernel/debug
      - /sys:/host/sys:ro
      - /dev:/hostfs/dev:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  sematext-logs:
    image: sematext/logagent:latest
    container_name: sematext-logs
    profiles:
      - sematext-logs
    environment:
      - LOGS_TOKEN=$LOGS_TOKEN # set this in .env file
      - REGION=US
    cap_add:
      - SYS_ADMIN
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

  # ---------------------------------------------------------------------------
  # superset
  # ---------------------------------------------------------------------------
  # a sql-based dashboard application

  # ---------------------------------------------------------------------------
  # traefik
  # ---------------------------------------------------------------------------
  # a reverse proxy
  # will need to add labels to grafana or other service you want to expose -
  # see client-demo/compose-overrides.yaml or client-oxbox for examples.
  # Traefik will connect to the hosting Docker daemon to retrieve the 
  # needed metadata. It will scan for Docker containers that are marked with 
  # labels and will publish the services accordingly. 
  traefik:
    image: traefik:v2.5.3
    container_name: traefik
    profiles:
      - traefik
    ports:
      - 80:80/tcp
      - 443:443/tcp
    command:
      - --certresolv.myresolver.acme.storage=/etc/traefik/acme.json
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # will need to do this before starting traefik -
      #   mkdir ../client-oxbox/volumes/traefik
      #   touch ../client-oxbox/volumes/traefik/acme.json
      #   chmod 600 ../client-oxbox/volumes/traefik/acme.json
      #. is that correct?
      # can't do this as docker-compose will create acme.json as a directory - 
      # "docker-compose only creates folders, acme.json can be a folder name, 
      # it's impossible for it to know you want it to be a file. So if that file isn't 
      # present at that path when you create the container, it will create a folder."
      # and if you try manually creating a blank file and set chmod 600 on it, 
      # traefik will complain.
      # https://williamhayes.medium.com/traefik-letsencrypt-and-acme-json-configuration-problems-5780c914351d
      # - ../$SETUP/volumes/traefik/acme.json:/acme.json
      # so need to mount the directory and create the file manually?
      - ../$SETUP/volumes/traefik/:/etc/traefik/
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

networks:
  ladder99:
    name: ladder99

# docker volume to share data between backup and postgres services
volumes:
  backup:
