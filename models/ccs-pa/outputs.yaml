# outputs

# these outputs are placed in the model.yaml tree and define the
# shdr strings that are calculated and sent to the agent.

# the item's key (eg 'connection') together with the deviceId (eg 'ccs-pa-001')
# form its id in the xml (eg 'ccs-pa-001-connection').

# the shdr key is the same as the id.
# the shdr value is defined with the item value code.

# value is javascript
# <foo> is a cache lookup, shorthand for cache.get('${deviceId}-foo').value

outputs:
  - key: connection
    category: EVENT
    type: AVAILABILITY
    value: types.AVAILABILITY[<status-connection>]

  # eg change tool to a drill etc - irrelevant to p&a
  - key: asset_changed
    category: EVENT
    type: ASSET_CHANGED # see std pt 4 line 347
    value:

  - key: asset_removed
    category: EVENT
    type: ASSET_REMOVED # see std pt 4 line 357
    value:

  - key: dev_cond
    category: CONDITION
    type: SYSTEM
    #value: |
    #  const str = <status-has-hard-faults> ? 'FAULT' : <status-has-soft-faults> ? 'WARNING' : 'NORMAL'
    #  return str
    value: types.CONDITION_TRIPLE[[<status-has-hard-faults>, <status-has-soft-faults>, <status-has-no-faults>].indexOf(true)]

  - key: dev_msg
    category: EVENT
    type: MESSAGE
    representation: DATA_SET # set of kv pairs, part2 7.2.2.12 line 1082
    value: |
      const faults = Object.values(<status-faults>)
      const str = faults.map(fault => fault.id + ':' + fault.description).join(', ')
      return str

  - key: fw_ver
    category: EVENT
    type: FIRMWARE
    subType: VERSION
    value: <status-build_no>

  - key: func_mode
    category: EVENT
    type: FUNCTIONAL_MODE
    value: types.FUNCTIONAL_MODE[<status-has-faults>]

  - key: e_stop
    category: EVENT
    type: EMERGENCY_STOP
    value: |
      const str = types.EMERGENCY_STOP[<status-has-fault-ten>]
      return str

  - key: state
    category: EVENT
    type: EXECUTION
    value: types.EXECUTION[<status-state>]

  - key: wait_state
    category: EVENT
    type: WAIT_STATE
    #. what value goes here when status.state is not WAIT?
    value: types.WAIT_STATE[<status-state>]

  - key: program
    category: EVENT
    type: PROGRAM
    subType: MAIN
    value: <status-program>

  - key: step
    category: EVENT
    type: BLOCK
    value: <status-step>

  - key: cycle_time
    category: SAMPLE
    type: PROCESS_TIMER
    subType: PROCESS
    units: SECONDS
    value: <status-cycle_time>

  - key: clk_time
    category: SAMPLE
    type: CLOCK_TIME
    value: <status-utc_time>

  - key: up_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: OPERATING
    value: <status-cpu_time>

  - key: fault_count
    category: SAMPLE
    type: COUNT
    value: <fault_count>

  - key: cycle_count
    category: SAMPLE
    type: COUNT
    value: <cycle_count>

  - key: life_count
    category: SAMPLE
    type: COUNT
    value: <life_count>

  - key: end_eff_cond
    category: CONDITION
    type: SYSTEM
    #value: types.FAULT_CONDITION[<status-has-tamp-fault>]
    value: types.CONDITION_TRIPLE[[<status-has-tamp-fault>, false, true].indexOf(true)]

  - key: end_eff_message
    category: EVENT
    type: MESSAGE
    representation: DATA_SET
    value: |
      const str = Object.keys(<status-faults>).filter(key => key in [2,3,5]).map(key => key + ':' + $.faults[key].description).join(', ')
      return str

  - key: smart_tamp_part_detect
    category: EVENT
    type: PART_DETECT
    value: |
      const str = <smart_tamp_enabled> ? types.PART_DETECT[<tamp_part_detect>] : 'UNAVAILABLE'
      return str

  - key: tamp_air_assist
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<tamp_air_assist>]

  - key: tamp_vacuum
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<tamp_vacuum>]

  - key: tamp_cylinder
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<tamp_cylinder>]

  - key: cylinder_extend_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: WORKING
    unit: SECOND
    value: <cylinder_extend_time>

  - key: cylinder_home_disengage_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: WORKING
    unit: SECOND
    value: <cylinder_home_disengage_time>

  - key: cylinder_travel_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: WORKING
    unit: SECOND
    value: <cylinder_travel_time>

  - key: tamp_vacuum_delay
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <tamp_vacuum_delay>

  - key: feed_cond
    category: CONDITION
    type: SYSTEM
    #value: |
    #  const str = <status-has-feed-fault> ? 'FAULT' : <status-has-feed-warning> ? 'WARNING' : 'NORMAL'
    #  return str
    value: types.CONDITION_TRIPLE[[<status-has-feed-fault>, <status-has-feed-warning>, true].indexOf(true)]

  - key: feed_message
    category: EVENT
    type: MESSAGE
    representation: DATA_SET
    value: |
      const str = Object.keys(<status-faults>).filter(key => key in [1,11,12,13,14,15,50,51]).map(key => key + ':' + $.faults[key].description).join(', ')
      return str

  - key: feed_part_detect
    category: EVENT
    type: PART_DETECT
    # TODO: depends on mode of operation and trigger edge
    value: types.PART_DETECT[<product_sensor_one>]

  - key: web_take_up_motor_state
    category: EVENT
    type: ACTUATOR_STATE
    # TODO: commanded?
    value: types.ACTUATOR_STATE[<web_take_up_motor_state>]

  - key: printer_reprint
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<printer_reprint>]

  - key: printer_pause
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<printer_pause>]

  - key: printer_feed
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<printer_feed>]

  - key: printer_start_print
    category: EVENT
    type: ACTUATOR_STATE
    value: types.ACTUATOR_STATE[<printer_start_print>]

  - key: print_signal_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <print_signal_time>

  - key: print_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: WORKING
    unit: SECOND
    value: <print_time>

  - key: transport_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <transport_time>

  - key: idle_time
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <idle_time>

  - key: printer_start_print_duration
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <printer_start_print_duration>

  - key: printer_end_print_wait
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <printer_end_print_wait>

  - key: product_sensor_one_edge_trigger
    type: UNKNOWN #..
    category: SAMPLE
    value: <product_sensor_one_edge_trigger>

  - key: product_sensor_one_debounce
    category: SAMPLE
    type: EQUIPMENT_TIMER
    subType: DELAY
    unit: SECOND
    value: <product_sensor_one_debounce>
