# inputs
# these are parsed by the adapter plugin, eg mqtt-json.js.
# note: each input's cache id will be {deviceId}-{key}, eg 'ccs-pa-001-status-connection'

handlers:
  connect:
    subscribe:
      - topic: l99/${deviceId}/evt/query
    publish:
      - topic: l99/${deviceId}/cmd/query
        payload: '{}'

  l99/${deviceId}/evt/query:
    subscribe:
      - topic: l99/${deviceId}/evt/status
      - topic: l99/${deviceId}/evt/read

  l99/${deviceId}/evt/status:
    code:
      $ = payload

    #. do as a table?
    inputs:
      - key: status-connection
        value: $.connection

      - key: status-build_no
        value: $.build_no

      - key: status-state
        value: $.state

      - key: status-program
        value: $.program

      - key: status-step
        value: $.step

      - key: status-utc_time
        value: $.utc_time

      - key: status-cpu_time
        value: $.cpu_time

      - key: status-faults
        value: $.faults

      - key: status-has-no-faults
        value: Object.keys($.faults).length === 0

      - key: status-has-faults
        value: Object.keys($.faults).length > 0

      - key: status-has-soft-faults
        value: Object.keys($.faults).some(f => f>='50')

      - key: status-has-hard-faults
        value: Object.keys($.faults).some(f => f<'50')

      - key: status-has-fault-ten
        value: Object.keys($.faults).some(f => f==='10')

      - key: status-has-tamp-fault
        value: Object.keys($.faults).map(f=>['2','3','5'].includes(f)).some(bool=>bool)

      - key: status-has-feed-fault
        value: Object.keys($.faults).map(f=>['1','11','12','13','14,'15'].includes(f)).some(bool=>bool)

      - key: status-has-feed-warning
        value: Object.keys($.faults).map(f=>['50','51'].includes(f)).some(bool=>bool)

  l99/${deviceId}/evt/read:
    # had value: $.find(a=>a.address==='%I0.0').value
    # but that would be O(n^2), and have n=72

    # make a dict of msg payload values keyed on their address
    code: |
      $ = {}
      payload.forEach(item => $[item.address] = item)
      // write all aliases to cache? but duplications
      // what if wrote to cache each item as key=keys[0], value=default

    table: &read_table
      '%I0.0': printer_ribbon_low
      '%I0.1': printer_service_required
      '%I0.2': printer_print_end
      '%I0.3': printer_media_out
      '%I0.4': printer_ribbon_out
      '%I0.5': printer_data_ready
      '%I0.6': product_sensor_one
      '%I0.7': tamp_head_up
      '%I0.8': input_9
      '%I0.9': smart_tamp_proximity
      '%I0.10': safety_e_stop
      '%I0.11': product_sensor_aux
      '%I0.12': web_media_low
      '%I0.13': web_dancer_arm
      '%I0.14': input_15
      '%I0.15': input_16
      '%Q0.0': printer_start_print
      '%Q0.1': printer_feed
      '%Q0.2': printer_pause
      '%Q0.3': printer_reprint
      '%Q0.4': tamp_air_assist
      '%Q0.5': tamp_vacuum
      '%Q0.6': tamp_cylinder
      '%Q0.7': output_8
      '%Q0.8': output_9
      '%Q0.9': andon_green
      '%Q0.10': andon_red
      '%Q0.11': andon_yellow
      '%Q0.12': output_13
      '%Q0.13': output_14
      '%Q0.14': output_15
      '%Q0.15': output_16
      '%Q1.0': web_take_up_motor_state
      '%M55.0': life_count
      '%M55.1': cycle_count
      '%M55.2': fault_count
      '%M55.3': idle_time
      '%M55.4': transport_time
      '%M55.5': printer_time
      '%M55.6': labels_applied
      '%M55.7': cylinder_travel_time
      '%M55.8': cylinder_home_disengage_time
      '%M55.9': cylinder_extend_time
      '%M55.10': print_signal_time
      '%M56.0': tamp_vacuum_delay
      '%M56.1': printer_start_print_duration
      '%M56.2': printer_end_print_wait
      '%M56.3': product_sensor_one_edge_trigger
      '%M56.4': product_sensor_one_debounce
      '%M56.5': product_sensor_one_delay
      '%M56.6': tamp_cylinder_extend_duration
      '%M56.7': tamp_cylinder_travel_duration_multiplier
      '%M56.8': tamp_head_up_wait_duration
      '%M56.9': multi_feed_count
      '%M56.10': multi_feed_delay
      '%M56.11': product_sensor_aux_enabled
      '%M56.12': product_sensor_aux_edge_trigger
      '%M56.13': product_sensor_aux_debounce
      '%M56.14': product_sensor_aux_delay
      '%M56.15': machine_operating_mode
      '%M56.16': web_take_up_motor_timeout
      '%M56.17': web_take_up_motor_operating_mode
      '%M56.18': web_take_up_motor_start_delay
      '%M56.19': smart_tamp_enabled
      '%M56.20': product_sensor_one_bypass
      '%M56.21': printer_make
      '%M56.22': web_take_up_motor_anti_twitch_enabled
      '%M56.23': web_take_up_motor_anti_twitch_count
      '%Z55.0': web_take_up_motor_anti_twitch_counter
      '%Z55.1': web_take_up_motor_anti_twitch_active

l99/${deviceId}/evt/query: *read_topic
