#!/bin/bash

# this is the preferred approach for building cross-platform
# images, over the `build-parallel` script, which builds all platforms at same time.

# it's best to build each arch image separately, then combine them,
# because if a build crashes you lose the cached progress.

usage="
Usage: l99 build SERVICE

Build a multiplatform Docker image and push up to Docker hub.
Uses version from .l99_version file.

SERVICE     service name - adapter, meter, relay, etc.

Should login to Docker Hub first, in order to push image there -

    docker login --username ladder99  # password as in bitwarden.com

Example
    l99 build adapter
"

# show help if count of params is zero
if [ $# -eq 0 ]; then
    echo "$usage"
    exit
fi

# Get repository root path
repo_root="$(dirname "$(realpath "$0")")"

# Service name for which we should build the image
SERVICE="$1"

# Version that will be used as the Docker image tag
VERSION="$(cat "$repo_root/.l99_version")"

# Platform targets which should be included in the Docker image
# note: arm/v7 is 32bit for older pi's
# need arm64/v8 ?
platforms=('linux/amd64' 'linux/arm64')

# Docker Hub username used as the image tag prefix
USERNAME='ladder99'

echo "Version is $VERSION"

# Run QEMU hypervisor in a Docker container which enables execution of different multi-architecture containers by QEMU 1 and `binfmt_misc`
# Note: Do this each time, as it could cause some issues,
#       cf https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx
docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

# Remove `l99builder` if it exists
docker buildx rm l99builder || true

# Create new `l99builder`
docker buildx create --name l99builder --driver docker-container --use

# Inspect the current builder instance
docker buildx inspect --bootstrap

# Build a multi-arch Docker image and push it to Docker Hub
docker buildx build \
  --platform "$(IFS=,; echo "${platforms[*]}")" \
  --push \
  -t "$USERNAME/$SERVICE:$VERSION" \
  "$repo_root/services/$SERVICE"