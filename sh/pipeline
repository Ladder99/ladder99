#!/bin/sh

# run pipeline with docker compose.
# if docker compose not available, use sh/run and sh/stop.

usage="
Usage: sh/pipeline COMMAND SETUP PROFILES

Run a docker-compose yaml file with optional list of profiles to include.

COMMAND   start (run in console), startd (run detached), stop (stop all)
SETUP     setup subfolder, eg vmc (default), ccs-pa
PROFILES  space-delim list of profiles to start, eg agent (default), all

Examples

    sh/pipeline start
    sh/pipeline start ccs-pa broker adapter agent play

Note: use 'docker kill SERVICE' to stop an individual service    
"

if [ $# -eq 0 ]
    then
    echo "$usage"
    exit 1
fi

# get arguments
cmd=$1 # eg 'start', 'startd', 'stop'
setup=${2:-"vmc"} # eg 'ccs-pa'
shift
shift
profiles=${*:-"agent"} # eg 'agent play'

# file paths
pipeline="setups/pipeline.yaml"
overrides="setups/$setup/config/pipeline-overrides.yaml"
envfile="setups/.env"

# add main docker compose file for pipeline
args="--file $pipeline"

# add docker compose file for overrides
if [ -e $overrides ]; then
    args="$args --file $overrides"
fi

# add .env file if there
# . should be per setup folder? can you have multiple?
if [ -e $envfile ]; then
    args="$args --env-file $envfile"
fi

# get profile flags
profileFlags=""
for i in $profiles; do
    profileFlags="$profileFlags --profile $i"
done

# get flags
if [ "$cmd" = "startd" ]; then
    flags="--detach"
fi

# get command and run it
baseCmd="docker-compose $args $profileFlags"
if [ "$cmd" = "start" ] || [ "$cmd" = "startd" ]; then
    # pull any required images in the docker-compose files and start services.
    cmd="$baseCmd pull && $baseCmd up --build $flags"
else
    cmd="$baseCmd down"
fi
echo $cmd
bash -c "export SETUP=$setup && $cmd"
