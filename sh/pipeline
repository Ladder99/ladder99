#!/bin/sh

# run ladder99 pipeline with docker compose.
# if docker compose not available, use sh/docker/run and sh/docker/stop.

usage="
Usage: sh/pipeline COMMAND SETUP SERVICES

Run the Ladder99 pipeline with optional list of services to include.

COMMAND   start (run in console), startd (run detached), stop (stop all)
SETUP     setup folder, eg setups/test/vmc (default)
SERVICES  space-delim list of services to start, eg agent (default), all

Examples

    sh/pipeline start
    sh/pipeline start setups/test/print-apply agent
    sh/pipeline start setups/test/print-apply dashboard
    sh/pipeline start setups/test/print-apply dashboard play

Note: services are referenced by their 'profile' attribute in pipeline.yaml.
Note: use 'docker kill SERVICE' to stop an individual service.
"

if [ $# -eq 0 ]; then
    echo "$usage"
    exit 1
fi

# get arguments
cmd=$1 # eg 'start', 'startd', 'stop'
setup=${2:-"setups/test/vmc"}
shift
shift
services=${*:-"agent"} # eg 'agent play'

# file paths
pipeline="setups/pipeline.yaml"
# overrides="setups/$setup/pipeline-overrides.yaml"
overrides="$setup/pipeline-overrides.yaml"
# envfile="setups/.env"

# add main docker compose file for pipeline
args="--file $pipeline"

# add docker compose file for overrides
if [ -e $overrides ]; then
    args="$args --file $overrides"
fi

# add .env file if there
# . should be per setup folder? can you have multiple?
# if [ -e $envfile ]; then
#     args="$args --env-file $envfile"
# else
#     echo No setups/.env file found - copying from default...
#     cp setups/.env-default setups/.env
#     echo PLEASE EDIT setups/.env!
#     exit 1
# fi

# get profile flags
profileFlags=""
for profile in $services; do
    profileFlags="$profileFlags --profile $profile"
done

# get flags
if [ "$cmd" = "startd" ]; then
    flags="--detach"
fi

# get command and run it
baseCmd="docker-compose $args $profileFlags"
if [ "$cmd" = "start" ] || [ "$cmd" = "startd" ]; then
    # pull any required images in the docker-compose files and start services.
    cmd="$baseCmd pull && $baseCmd up --build $flags"
else
    cmd="$baseCmd down"
fi
echo $cmd
bash -c "export SETUP=$setup && $cmd"
