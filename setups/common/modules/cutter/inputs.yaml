# inputs

# define inputs to cache
# see outputs.yaml for cache outputs to mtconnect agent.

# the ladder99 adapter subscribes to topics from an mqtt broker,
# the mqtt broker sends data from the device(s) to adapter,
# and adapter parses messages, writes values to cache, which outputs shdr
# to the mtconnect agent when the values change.

# this file is parsed by the adapter driver services/adapter/src/drivers/mqtt-json.js.

# note: cache keys are ARBITRARY,
# ie not necessarily the same as dataitem id OR name.
# eg the 'status_step' key references the cache value at 'kl1-status_step',
# which is set below, while the output key in outputs.yaml is 'step',
# which becomes eg 'kl1-step' for the SHDR id.

# the idea is to keep the SHDR id's as short as possible, to reduce network bandwidth,
# while the dataitem name can be more descriptive.

# define connect handler
connect:
  # subscribe to these topics
  # can use ${deviceId} in topic names
  subscribe:
    - topic: controller
    - topic: l99/B01000/evt/io
    - topic: l99/B01000/evt/vibration
    - topic: l99/B01000/evt/pressure
    # - topic: l99/B01000/evt/ident
    # - topic: l99/B01000/evt/agent
    # - topic: l99/B01000/evt/gateway
    # - topic: l99/B01000/evt/current

  # # publish an empty message to receive the query response
  # publish:
  #   - topic: l99/B01000/cmd/query
  #     message: '{}'
  # # define any one-time cache values to set
  # static:
  #   # this sets the cache value at eg 'kl1-procname' to 'KITTING'
  #   procname: KITTING

# define message topic handlers
handlers:
  # ----------------------------------------------------------------------------
  # handle controller messages
  # ----------------------------------------------------------------------------
  controller:
    # make '$' the payload value - 'birth', 'sleep', or 'death'
    initialize: '$ = payload'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    process: iterate_inputs
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'controller' => 's1-controller'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      dxm: $==='birth'

  # ----------------------------------------------------------------------------
  # handle io messages
  # ----------------------------------------------------------------------------
  # a message on this topic might look like this -
  #   {"id":"535172","a1":0.021972991531242846,"a2":0.013122758831158923,"a3":0.007629510948348211,"a4":0.021972991531242846,"a5":0,"a6":0,"a8":128}
  # where a5 is the partcount
  l99/B01000/evt/io:
    # make '$' the message payload dictionary
    #. JSON.parse the string explicitly here! otherwise, have to do try/catch for plain string handling
    initialize: '$ = payload'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    #. explain
    #. call it iterate-expressions
    process: iterate_inputs
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'connection' => 's1-connection'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      controller: $.a8===128 # 128=controller node is connected to DXM (which is connected to 001)
      part_count: $.a5

  # ----------------------------------------------------------------------------
  # handle motor messages
  # ----------------------------------------------------------------------------
  # var p = {
  #     "id": "479055",
  #     "a22": x_motor_velocity_rms_z,
  #     "a25": x_motor_accel_rms_z,
  #     "a192": x_motor_temperature,
  #     "a70": x_motor_velocity_rms_x,
  #     "a73": x_motor_accel_rms_x
  # };
  l99/B01000/evt/vibration:
    # make '$' the message payload dictionary
    initialize: '$ = payload'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    #. explain
    #. call it 'algorithm: iterate-expressions'
    process: iterate_inputs
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'status_connection' => 'pa1-status_connection'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      xvelz: $.a22
      xaccz: $.a25
      xtemp: $.a192
      xvelx: $.a70
      xaccx: $.a73

  # ----------------------------------------------------------------------------
  # handle pressure
  # ----------------------------------------------------------------------------
  # <!-- l99/B01000/evt/pressure { "id": "479055" "a2": c-stacker_pressure } -->
  # <!-- agent.cfg conversionRequired: yes -->
  # <DataItem category="SAMPLE" id="m1-sp" name="stacker_pressure" type="PRESSURE" units="PASCAL" nativeUnits="POUND/INCH^2" />
  l99/B01000/evt/pressure:
    # make '$' the message payload dictionary and add faultKeys for quick
    # lookups of faults - payload.faults is a dictionary of faults.
    initialize: '$ = payload'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    #. explain
    #. call it iterate-expressions
    process: iterate_inputs
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'status_connection' => 'pa1-status_connection'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      # sp: $.a2
      sp: lib.rounded($.a2)
