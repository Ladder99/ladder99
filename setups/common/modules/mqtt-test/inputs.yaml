# inputs

# define inputs to cache
# see outputs.yaml for cache outputs to mtconnect agent.
# this file is parsed by the adapter driver services/adapter/src/drivers/mqttSubscriber.js.

# the ladder99 adapter subscribes to topics from an mqtt broker,
# the mqtt broker sends data from the device(s) to adapter,
# and adapter parses messages, writes values to cache, which outputs shdr
# to the mtconnect agent when the values change.

# note: cache keys are ARBITRARY,
# ie not necessarily the same as dataitem id OR name.
# eg the 'status_step' key references the cache value at 'kl1-status_step',
# which is set below, while the output key in outputs.yaml is 'step',
# which becomes eg 'kl1-step' for the SHDR id.

# the idea is to keep the SHDR id's as short as possible, to reduce network bandwidth,
# while the dataitem name can be more descriptive.

# define connect handler
connect:
  # subscribe to these topics
  # can use ${deviceId} in topic names
  subscribe:
    - topic: l99/test

# define message topic handlers
handlers:
  l99/test:
    initialize: '$ = payload'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    algorithm: iterate_expressions
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'controller' => 's1-controller'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      user1: $.user1
      user2: lib.round($.user2, 1)
