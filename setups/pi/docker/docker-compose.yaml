#. this will be generated from devices.yaml, but edit manually for now.
# order of startup: broker, adapter, agent, application, simulators.

#. note: this is currently setup for the pi,
# where it expects the adapter and agent datafiles to be in /etc folders.
# so won't run on desktop with `just run pi` yet.

version: '3.7'

services:
  broker-ccs-pa-001:
    container_name: broker-ccs-pa-001
    image: eclipse-mosquitto
    networks:
      - ladder99
    ports:
      - 1883:1883
    volumes:
      - ../volumes/broker-ccs-pa-001:/mosquitto
    logging:
      options:
        max-size: '1m'

  adapter:
    container_name: adapter
    image: ladder99/adapter:latest
    networks:
      - ladder99
    depends_on:
      - broker-ccs-pa-001
    volumes:
      - adapter:/data/adapter
    logging:
      options:
        max-size: '1m'

  agent:
    container_name: agent
    image: ladder99/mtconnect-agent:latest
    networks:
      - ladder99
    ports:
      - 5000:5000
    depends_on:
      - adapter
    command: agent debug /data/agent/agent.cfg
    volumes:
      - agent:/data/agent
    logging:
      options:
        max-size: '1m'

  simulator-mqtt:
    container_name: simulator-mqtt
    image: node:15
    user: node
    working_dir: /home/node/app
    command: npm start
    environment:
      - MQTT_HOST=broker-ccs-pa-001
      - MQTT_PORT=1883
      - DEVICE_ID=ccs-pa-001
      - MESSAGES_FILE=/etc/simulator-mqtt/messages.js
      - MESSAGE_DELAY=1000
      - LOOP=true
      - LOOP_DELAY=3000
    depends_on:
      - agent
    networks:
      - ladder99
    volumes:
      - ../../../services/simulator-mqtt:/home/node/app
      - ../volumes/simulator-mqtt:/etc/simulator-mqtt
    logging:
      options:
        max-size: '1m'

  simulator-opc:
    container_name: simulator-opc
    image: node:15
    user: node
    working_dir: /home/node/app
    command: npm start
    volumes:
      - ../../../services/simulator-opc:/home/node/app
    depends_on:
      - agent
    networks:
      - ladder99
    logging:
      options:
        max-size: '1m'

  # timescaledb:
  #   container_name: timescaledb
  #   image: timescale/timescaledb:1.7.4-pg12
  #   ports:
  #     - '5432:5432/tcp'
  #   networks:
  #     - ladder99
  #   environment:
  #     POSTGRES_USERNAME: postgres
  #     POSTGRES_PASSWORD: gralgrut
  #     POSTGRES_DB: ladder99
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   volumes:
  #     - $HOME/data/postgres:/var/lib/postgresql/data

  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:7.1.5
  #   ports:
  #     - '3000:3000/tcp'
  #   networks:
  #     - ladder99
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #   volumes:
  #     - $HOME/data/grafana:/var/lib/grafana
  #   user: grafana

  # pgadmin:
  #   container_name: pgadmin
  #   image: biarms/pgadmin4:4.21
  #   ports:
  #     - '5050:5050/tcp'
  #   networks:
  #     - ladder99
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    logging:
      driver: 'none'
    networks:
      - ladder99
    ports:
      - '9000:9000'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  portainer_data:
  adapter:
    external: true
  agent:
    external: true

networks:
  ladder99:
    name: ladder99
