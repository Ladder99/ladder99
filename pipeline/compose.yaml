# docker compose file for the complete ladder99 pipeline.
# can override these settings in setup-specific compose-overrides.yaml files.

# see ./start for how to run

version: '3.8'

services:
  # adapter - convert machine data to shdr and send to agent
  adapter:
    container_name: adapter
    # image: ladder99/adapter:latest # use this if build docker image and push to hub
    # build: ../pipeline/adapter # see Dockerfile in this folder
    build: ./adapter # see Dockerfile in this folder
    # set this to give permission to access hardware (e.g. dymo scale in usb port).
    #. security hole - leave off for now, until need dymo driver.
    # privileged: true
    profiles:
      - all
      - adapter
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
      - ../modules:/data/modules # has module yamls
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # agent - take in shdr and output xml/json/html
  agent:
    container_name: agent
    image: ladder99/agent:latest
    profiles:
      - all
      - agent
      - html
    working_dir: /data/agent
    command: agent debug agent.cfg
    volumes:
      - ../$SETUP/volumes/agent:/data/agent # should have agent.cfg, agent.xml
    ports:
      - 5000:5000
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # cloudbeaver - database web ui
  cloudbeaver:
    container_name: cloudbeaver
    # image: cloudbeaver/cloudbeaver:latest
    build: ./cloudbeaver
    profiles:
      - all
      - cloudbeaver
    volumes:
      # - ../$SETUP/volumes/cloudbeaver/workspace:/apps/cloudbeaver/workspace
      - ../$SETUP/volumes/cloudbeaver/workspace:/opt/cloudbeaver/workspace
    ports:
      - 8978:8978
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # dozzle - manage docker logs
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    profiles:
      - all
      - dozzle
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8080:8080
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # # ftpd - ftp daemon
  # ftpd:
  #   container_name: ftpd
  #   image: crazymax/pure-ftpd
  #   profiles:
  #     - all
  #     - ftpd
  #   restart: always
  #   networks:
  #     - ladder99
  #   ports:
  #     - '21:2100'
  #     - '30000-30009:30000-30009'
  #   volumes:
  #     - ../$SETUP/volumes/ftpd/data:/home/ftp:rw
  #     - ../$SETUP/volumes/ftpd/passwd:/data:rw
  #   environment:
  #     - 'PASSIVE_IP=10.1.38.128'
  #   logging:
  #     driver: 'json-file'
  #     options:
  #       max-file: '5'
  #       max-size: '1m'

  # grafana - show real-time data from the database, handle notifications
  grafana:
    container_name: grafana
    # image: grafana/grafana:7.5.5
    image: grafana/grafana:8.2.2
    profiles:
      - all
      - grafana
      - dashboard
    ports:
      - $GRAFANA_PORT:3000/tcp
    environment:
      # need these for provisioning datasources
      #. don't use PGPASSWORD - how use .pgpass file with grafana tho?
      # note: null is a docker convention for passing values in through 
      # environment variables.
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
      JOBBOSS_HOST: null
      JOBBOSS_PORT: null
      JOBBOSS_DATABASE: null
      JOBBOSS_USER: null
      JOBBOSS_PASSWORD: null
      # INFLUXDB_DB:
      # INFLUXDB_USER:
      # INFLUXDB_PASSWORD:
      # grafana will download and install these automatically
      # https://grafana.com/docs/grafana/latest/installation/docker/#install-plugins-in-the-docker-container
      GF_INSTALL_PLUGINS: natel-discrete-panel,natel-plotly-panel,michaeldmoore-scatter-panel,dalvany-image-panel
    volumes:
      # note: grafana.ini is located in /etc/grafana by default -
      # other folders are specified there.
      - ../$SETUP/volumes/grafana/etc:/etc/grafana
      - ../$SETUP/volumes/grafana/var:/var/lib/grafana
      - ../dashboards/grafana:/etc/dashboards
    # as of v7.3, the Grafana Docker image runs with the root group (id 0) instead
    # of the grafana group (id 472), for better compatibility with OpenShift.
    # gives permission error without user:root - not on mac. only on arm?
    #. don't use this - how?
    user: root
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # # hue - a sql database manager
  # hue:
  #   container_name: hue
  #   image: gethue/hue:latest
  #   profiles:
  #     - all
  #     - hue
  #   ports:
  #     - 8888:8888
  #   restart: always
  #   networks:
  #     - ladder99
  #   logging:
  #     options:
  #       max-size: '20m'

  # meter - calculate metrics
  meter:
    container_name: meter
    build: ./meter
    profiles:
      - all
      - meter
    # command: recorder --mode record
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml
      # - ../modules:/data/modules # has module-specific recordings folder
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # mosquitto - get mqtt data from devices and publish to mtconnect adapter
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    profiles:
      - all
      - mosquitto
    ports:
      - 1883:1883
    volumes:
      - ../$SETUP/volumes/mosquitto/config:/mosquitto/config # has mosquitto.conf
      - ../$SETUP/volumes/mosquitto/data:/mosquitto/data
      - ../$SETUP/volumes/mosquitto/log:/mosquitto/log
    # environment:
    #   - PUID=${PUID}
    #   - PGID=${PGID}
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # # nocodb - an airtable clone - plug in a database
  # nocodb:
  #   container_name: nocodb
  #   image: nocodb/nocodb:latest
  #   profiles:
  #     - all
  #     - nocodb
  #   restart: always
  #   networks:
  #     - ladder99
  #   ports:
  #     - "8081:8080"
  #   volumes:
  #     - ../$SETUP/volumes/nocodb:/usr/app/data:rw
  #   environment:
  #     NC_DB_JSON_FILE: "/usr/app/data/nc.json"

  # nodered - a visual programming environment
  nodered:
    container_name: nodered
    image: nodered/node-red:latest
    profiles:
      - all
      - nodered
    restart: always
    networks:
      - ladder99
    ports:
      - '1880:1880'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      # note: have to `sudo chown pi:pi volumes/nodered/data` for nodered to work
      - ../$SETUP/volumes/nodered/data:/data:rw
      # - ../$SETUP/volumes/ftpd/data:/volumes/ftpd-data:rw
    logging:
      driver: 'json-file'
      options:
        max-file: '5'
        max-size: '1m'

  # pgadmin - admin console for postgres database
  pgadmin:
    container_name: pgadmin
    image: biarms/pgadmin4:latest
    profiles:
      - all
      - pgadmin
      - dashboard
    ports:
      - '5050:5050/tcp'
    restart: always
    networks:
      - ladder99
    deploy:
      restart_policy:
        condition: on-failure

  # play - playback device recordings
  play:
    container_name: play
    build: ./recorder
    profiles:
      - all
      - play
    command: recorder --mode play
    # ports:
    #   - 8080:8080
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # portainer - docker container viewer/management
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    profiles:
      - all
      - portainer
    ports:
      - '9000:9000'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ../$SETUP/volumes/portainer/data:/data
    restart: always
    networks:
      - ladder99
    logging:
      driver: 'none'

  # postgres - store structure and time-series data
  postgres:
    container_name: postgres
    image: timescale/timescaledb:2.3.0-pg13
    ports:
      - $PGPORT:5432/tcp
    profiles:
      - all
      - postgres
      - dashboard
    # init: true
    #. don't use PGPASSWORD - see https://stackoverflow.com/a/6405162/243392
    # https://www.postgresql.org/docs/9.1/libpq-pgpass.html
    environment:
      POSTGRES_DB: $PGDATABASE
      POSTGRES_USERNAME: $PGUSER
      POSTGRES_PASSWORD: $PGPASSWORD
    volumes:
      - ../$SETUP/volumes/postgres/data:/var/lib/postgresql/data
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # record - record device messages for future playback
  record:
    container_name: record
    build: ./recorder
    profiles:
      - all
      - record
    command: recorder --mode record
    volumes:
      - ../$SETUP:/data/setup # has setup-specific recordings folder
      - ../modules:/data/modules # has module-specific recordings folder
    restart: always
    networks:
      - ladder99
    logging:
      options:
        max-size: '20m'

  # relay - fetch data from agent and send to db
  relay:
    container_name: relay
    build: ./relay
    profiles:
      - all
      - relay
      - dashboard
    init: true
    environment:
      # override these as needed in pipeline-overrides.yaml
      AGENT_ENDPOINTS: http://agent:5000
      FETCH_INTERVAL: 2000
      FETCH_COUNT: 800
      PGHOST: null
      PGPORT: null
      PGDATABASE: null
      PGUSER: null
      PGPASSWORD: null
        # this fixes a problem on ubuntu - works on mac okay also
        #. but not on friendlywrt - host-gateway doesn't exist, or need docker>=20.10
        # see https://stackoverflow.com/a/67158212/243392
        # and https://docs.docker.com/compose/compose-file/compose-file-v3/#extra_hosts
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: always
    networks:
      - ladder99
    volumes:
      - ../$SETUP:/data/setup # has setup.yaml etc
    logging:
      options:
        max-size: '20m'
  # superset - a sql-based dashboard application

networks:
  ladder99:
    name: ladder99
