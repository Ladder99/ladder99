# inputs

# this is parsed by the adapter plugin mqtt-json.js.
# handles mqtt messages, writes values to the cache.

# define connect handler
connect:
  subscribe:
    - topic: l99/${deviceId}/evt/query
    - topic: l99/${deviceId}/evt/status
    - topic: l99/${deviceId}/evt/read
  publish:
    - topic: l99/${deviceId}/cmd/query
      message: '{}'

# define message topic handlers
handlers:
  # handle query responses
  l99/${deviceId}/evt/query:
    unsubscribe:
      - topic: l99/${deviceId}/evt/query
    # subscribe:
    #   - topic: l99/${deviceId}/evt/status
    #   - topic: l99/${deviceId}/evt/read

    # $ is a way to do quick lookups on the mqtt payload.
    # in this case the payload is an array of items like { keys, default }.
    # what we want to do is assign the default value to each item's key,
    # where the key is keys[0], eg 'printer_ribbon_low'.
    # $ is a variable declared as `let $ = {}` before this code is executed.
    #. this complexity should be hidden from the user in the plugin code with parameterization.
    initialize: 'payload.forEach(item => $[item.keys[0]] = item)'

    # lookup: '($, part) => ({ value: ($[part] || {}).default })'
    lookup: '($, part) => ($[part] || {}).default'

    # define key-value pairs
    # the & syntax saves this list for later, as the read message handler
    # uses the same pairs.
    # key defines the cache id, with id = {deviceId}-{key},
    # eg for key='printer_ribbon_low', id = 'pa1-printer_ribbon_low'.
    # part defines the part of the payload to get using the above defined
    # lookup fn, eg for part='%I0.0', the value is obtained with $['%I0.0'].
    # then it calls cache.set(id, value),
    # eg cache.set('pa-printer_ribbon_low', 0)
    # this might trigger SHDR output to be sent to the mtconnect agent.
    inputs: &queryInputs
      distance: '%M55.0'
      timer: '%M55.1'
      in_progress: '%M55.2'
      running_man: '%M55.3'
      speed: '%M55.4'
      start_input: '%M55.5'
      stop_input: '%M55.6'

  # handle status messages
  l99/${deviceId}/evt/status:
    # make $ the message payload dictionary and add faultKeys for quick
    # lookups of faults - payload.faults is a dictionary of faults.
    initialize: '$ = payload; $.faultKeys=Object.keys(payload.faults);'
    # define lookup function, which returns a value given a part calculation.
    # lookup: '($, part) => ({ value: eval(part) })'
    lookup: '($, part) => eval(part)'
    # define key-part pairs, where key is mapped to a cache id,
    # eg 'status-connection' => 'pa-status_connection',
    # and part is some javascript calculation code to determine its value.
    inputs:
      connection: $.connection
      build_no: $.build_no
      state: $.state
      program: $.program
      step: $.step
      utc_time: $.utc_time
      cpu_time: $.cpu_time
      faults: $.faults
      has-no-faults: $.faultKeys.length === 0
      has-faults: $.faultKeys.length > 0

  # handle read messages
  l99/${deviceId}/evt/read:
    # make $ a dictionary keyed on the item addresses
    initialize: 'payload.forEach(item => $[item.address] = item)'
    # lookup: '($, part) => ({ value: ($[part] || {}).value })'
    lookup: '($, part) => ($[part] || {}).value'
    # reuse the query input list here, as the key-part pairs are the same
    inputs: *queryInputs
