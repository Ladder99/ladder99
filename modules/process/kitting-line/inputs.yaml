# inputs
# define cache inputs - mqtt topics, how to parse them and put them into cache.
# see outputs.yaml for cache output as shdr.

# adapter subscribes to mqtt topics from devices.
# mqtt broker sends data to adapter.
# adapter parses messages, writes values to cache, which outputs shdr.

# this file is parsed by the adapter driver pipeline/adapter/src/drivers/mqtt-json.js.

# define connect handler
connect:
  # subscribe to these topics
  # can use ${deviceId} in topics
  subscribe:
    - topic: l99/ccs/evt/query
    - topic: l99/ccs/evt/status
    - topic: l99/ccs/evt/read
  # publish an empty message to receive the query response
  publish:
    - topic: l99/ccs/cmd/query
      message: '{}'

# define message topic handlers
handlers:
  # ----------------------------------------------------------------------------
  # handle status messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/status:
    # make '$' the message payload dictionary and add faultKeys for quick
    # lookups of faults - payload.faults is a dictionary of faults.
    initialize: '$ = payload; $.faultKeys=Object.keys(payload.faults);'
    # define lookup function, which returns a value given a part calculation.
    lookup: '($, part) => ({ value: eval(part) })'
    # define key-part pairs, where key is mapped to a cache id,
    # eg 'status-connection' => 'pa1-status_connection',
    # and part is some javascript calculation code to determine its value.
    inputs:
      status_connection: $.connection
      status_build_no: $.build_no
      status_program: $.program
      status_step: $.step
      status_state: $.state
      status_utc_time: $.utc_time
      status_cpu_time: $.cpu_time
      status_faults: $.faults
      status_has_no_faults: $.faultKeys.length === 0
      status_has_faults: $.faultKeys.length > 0
      status_has_soft_faults: $.faultKeys.some(f => f>='50')
      status_has_hard_faults: $.faultKeys.some(f => f<'50')

  # ----------------------------------------------------------------------------
  # handle query messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/query:
    unsubscribe:
      - topic: l99/ccs/evt/query

    # $ is a way to do quick lookups on the mqtt payload.
    # in this case the payload is an array of items like [{ keys, default }, ...].
    # what we want to do is assign the default value to each item's key,
    # where the key is keys[0], eg 'printer_ribbon_low'.
    # $ is a variable declared as `let $ = {}` before this code is executed.
    #. this complexity could be hidden from the user in the plugin code
    initialize: 'payload.forEach(item => $[item.address] = item)'

    # define a lookup function to use to get item from payload, if there.
    # the plugin has -
    #   const item = lookup($, part)
    lookup: '($, part) => ({ value: ($[part] || {}).default })'

    # define key-part pairs
    # 'key' defines the cache id, with id = {deviceId}-{key},
    # eg for key='printer_ribbon_low', id = 'pa1-printer_ribbon_low'.
    # 'part' defines the part of the payload to get using the above defined
    # lookup fn, eg for part='%I0.0', the value is obtained with $['%I0.0'].
    # then it sets item = { value }, then calls cache.set(id, item),
    # eg cache.set('pa1-printer_ribbon_low', { value: 0 })
    # this might trigger SHDR output to be sent to the mtconnect agent,
    # according to the outputs defined in outputs.yaml.
    # the & syntax saves this list for later, as the read message handler
    # uses the same pairs.
    inputs: &queryInputs
      procname: ='KITTING'

      # get job meta data from kit label
      job_meta: =(($['%Z61.0'] || {}).value) || {}

      #. how specify printer assoc with this line? can't hardcode it like this
      piece_count_at_print_apply: |
        =(<job_meta>.kit_count || 0) - (cache.get('pr1-labels_remaining').value || 0)

      # check if eye1 or eye2 counts changed, set flags
      # kit_on_changed: =$['Z61.5'] !== undefined && (<kit_on> !== $['Z61.5'])
      # kit_off_changed: =$['Z61.6'] !== undefined && (<kit_off> !== $['Z61.6'])
      kit_on_changed: =<kit_on> !== $['Z61.5']
      kit_off_changed: =<kit_off> !== $['Z61.6']

      # count of kits that have crossed eye1 on conveyer
      kit_on: '%Z61.5'

      # count of kits that have crossed eye2 on conveyer
      kit_off: '%Z61.6'

      # calculate cycle time for kit to go from eye1 to eye2
      update_cycle_time: |
        =if (<kit_on_changed>) { keyvalues[<kit_on>] = { start: new Date(), end: null, delta: null} }
      cycle_time: |
        =if (<kit_off_changed>) {
          let koff = keyvalues[<kit_off>] || {};
          koff.end = new Date();
          koff.delta = koff.end - koff.start;
        }

      pieces_in_assembly: =<kit_on> - <kit_off> # kits on assy line
      pieces_completed: =<kit_off> # kits finished
      pieces_began: =<kit_on> # kits work began

      # current job meta is not empty string
      has_current_job: =$['%Z61.0'] !== ''

      # current job done, pieces remaining reached zero
      job_complete: '%Z61.3'

      # compare cache to incoming data
      job_changed: =<job_current> !== <job_meta>.kit_number

      # kit assembly part number, can be empty string
      job_current: =<job_meta>.kit_number

      # assign new uuid's and time on job change
      part_uuid: '=<job_changed> ? uuid() : <part_uuid>'
      process_uuid: '=<job_changed> ? uuid() : <process_uuid>'
      job_start: '=<job_changed> ? new Date().toISOString() : <job_start>'

      salesord: =<job_meta>.sales_order_number

      # #. data coming from skid label, ChrisE needs to define address
      # purchord: =($['%Z61.x'] || {}).purchase_order_number

  # ----------------------------------------------------------------------------
  # handle read messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/read:
    # make $ a dictionary keyed on the item addresses
    initialize: 'payload.forEach(item => $[item.address] = item)'
    lookup: '($, part) => ({ value: ($[part] || {}).value })'
    # reuse the query input list here with *, as the key-part pairs are the same
    inputs: *queryInputs
