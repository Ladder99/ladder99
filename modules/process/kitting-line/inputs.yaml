# inputs
# define cache inputs - mqtt topics, how to parse them and put them into cache.
# see outputs.yaml for cache output as shdr.

# adapter subscribes to mqtt topics from devices.
# mqtt broker sends data to adapter.
# adapter parses messages, writes values to cache, which outputs shdr.

# this file is parsed by the adapter driver pipeline/adapter/src/drivers/mqtt-json.js.

# define connect handler
connect:
  # subscribe to these topics
  # can use ${deviceId} in topics
  subscribe:
    - topic: l99/ccs/evt/query
    - topic: l99/ccs/evt/status
    - topic: l99/ccs/evt/read
  # publish an empty message to receive the query response
  publish:
    - topic: l99/ccs/cmd/query
      message: '{}'

# define message topic handlers
handlers:
  # ----------------------------------------------------------------------------
  # handle status messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/status:
    # make '$' the message payload dictionary and add faultKeys for quick
    # lookups of faults - payload.faults is a dictionary of faults.
    initialize: '$ = payload; $.faultKeys=Object.keys(payload.faults);'
    # define lookup function, which returns a value given a part calculation.
    lookup: '($, part) => ({ value: eval(part) })'
    # define key-part pairs, where key is mapped to a cache id,
    # eg 'status-connection' => 'pa1-status_connection',
    # and part is some javascript calculation code to determine its value.
    inputs:
      status_connection: $.connection
      status_build_no: $.build_no
      status_program: $.program
      status_step: $.step
      status_utc_time: $.utc_time
      status_cpu_time: $.cpu_time
      status_faults: $.faults
      status_has_no_faults: $.faultKeys.length === 0
      status_has_faults: $.faultKeys.length > 0
      status_has_soft_faults: $.faultKeys.some(f => f>='50')
      status_has_hard_faults: $.faultKeys.some(f => f<'50')

  # ----------------------------------------------------------------------------
  # handle query messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/query:
    unsubscribe:
      - topic: l99/ccs/evt/query

    # $ is a way to do quick lookups on the mqtt payload.
    # in this case the payload is an array of items like [{ keys, default }, ...].
    # what we want to do is assign the default value to each item's key,
    # where the key is keys[0], eg 'printer_ribbon_low'.
    # $ is a variable declared as `let $ = {}` before this code is executed.
    #. this complexity could be hidden from the user in the plugin code
    initialize: 'payload.forEach(item => $[item.keys[0]] = item)'

    # define a lookup function to use to get item from payload, if there.
    # the plugin has -
    #   const item = lookup($, part)
    lookup: '($, part) => ({ value: ($[part] || {}).default })'

    # define key-part pairs
    # 'key' defines the cache id, with id = {deviceId}-{key},
    # eg for key='printer_ribbon_low', id = 'pa1-printer_ribbon_low'.
    # 'part' defines the part of the payload to get using the above defined
    # lookup fn, eg for part='%I0.0', the value is obtained with $['%I0.0'].
    # then it sets item = { value }, then calls cache.set(id, item),
    # eg cache.set('pa1-printer_ribbon_low', { value: 0 })
    # this might trigger SHDR output to be sent to the mtconnect agent,
    # according to the outputs defined in outputs.yaml.
    # the & syntax saves this list for later, as the read message handler
    # uses the same pairs.
    inputs: &queryInputs
      #

      #.. how specify printer assoc with this line? can't hardcode it like this
      piece_count_at_print_apply: =($['%Z61.0'] || {}).kit_count  - cache.get('pr1-labels_remaining').value

      pieces_in_assembly: =<kit_on> - <kit_off> # kits on assy line
      pieces_completed: =<kit_off> # kits finished
      pieces_began: =<kit_on> # kits work began

      kit_on: '%Z61.5' # kit placed on conveyer - eye1
      # kit_on#on_change: <piece_cycle_times>.add(<kit_on>, start=now(), end=null, c_t=null)

      kit_off: '%Z61.6' # kit removed from conveyer - eye2
      # kit_on#on_change: <piece_cycle_times>[<kit_off>].end=now();
      #                   <piece_cycle_times>[<kit_off>].c_t=<piece_cycle_times>[<kit_off>].end - <piece_cycle_times>[<kit_off>].start

      # piece_cycle_times: dict()

      has_current_job: =!!$['%Z61.0'] # current job meta is not empty string
      # job_done: '%Z61.3'                                          # current job done, pieces remaining reached zero
      # job_current: '%Z61.0'.to_json().kit_number                  # kit assembly part number
      # job_previous: null

      # # before and after fire only when new incoming 'job_current'
      # job_changed#before: <job_previous> = <job_current>
      # job_changed: <job_previous> != <job_current>                # comparing cache to incoming data
      # job_changed#after: <job_changed> ? false : <job_changed>    # needs to reset after evaluation back to 'false',
      #                                                             # account for same incoming 'job_current' as previous 'job_current'

      # part_uuid: if <job_changed> new uuid()
      # process_uuid: if <job_changed> new uuid()

      # salesord: '%Z61.0'.to_json().sales_order_number             # 61.0 is a json object, capture groups from kit label
      # purchord: '%Z61.x'.to_json().purchase_order_number          # data coming from skid label, ChrisE needs to define address

      # job_start: if <job_changed> now()
      # job_complete: '%Z61.3'

      # ----------------------------------------------------------------------------
      # handle read messages
      # ----------------------------------------------------------------------------

  l99/ccs/evt/read:
    # make $ a dictionary keyed on the item addresses
    initialize: 'payload.forEach(item => $[item.address] = item)'
    lookup: '($, part) => ({ value: ($[part] || {}).value })'
    # reuse the query input list here with *, as the key-part pairs are the same
    inputs: *queryInputs
