# outputs

# these outputs are placed in the module.xml tree and define the
# shdr strings that are calculated from the cache and sent to the agent.

# the item's id in the xml and the shdr key is `${deviceId}_${key}`
# the shdr value is defined with the item value code.

# value is javascript, evaluated by the cache in calculating the shdr output.
# <foo> is a cache lookup, shorthand for cache.get('${deviceId}_foo').value

# note: category is used to determine shdr representation.
# only need to specify category if CONDITION.
# only need to specify type if is MESSAGE.
# see end of pipeline/adapter/src/cache.js for details.

outputs:
  # ------------------------------------------------------------------
  # device
  # ------------------------------------------------------------------

  - key: avail
    value: types.AVAILABILITY[<status_connection>]

  #.
  # - key: func
  #   value:  if <has_current_job> and <pieces_began> == 0        'SETUP'
  #           else if <has_current_job> and <pieces_began> > 0    'PRODUCTION'
  #           else if <has_current_job> and <job_done> == true    'TEARDOWN'
  #           else if not <has_current_job>                       'UNAVAILABLE'

  key: func
  value: |
    <has_current_job> && <pieces_began> === 0 ? 'SETUP' : 
    <has_current_job> && <pieces_began> > 0 ? 'PRODUCTION' :
    <has_current_job> && <job_done> ? 'TEARDOWN' :
    'UNAVAILABLE'

  # ------------------------------------------------------------------
  # controller
  # ------------------------------------------------------------------

  - key: exec
    value: types.EXECUTION[<status_state>]

  - key: wait
    value: types.WAIT_STATE[<status_state>]

  - key: emp
    value: types.POWER[<status_connection>]

  - key: ctl_pgm
    value: <status_program>

  - key: step
    value: <status_step>

  - key: clk_time
    value: <status_utc_time>

  - key: up_time
    value: <status_cpu_time>

  - key: fw
    value: <status_build_no>

  # ------------------------------------------------------------------
  # process
  # ------------------------------------------------------------------

  - key: poid
    value: <process-uuid>

  - key: salesord
    value: <salesord>

  - key: purchord
    value: <purchord>

  #.
  # # nowork - needs a cache key to detect a change ehh
  # - key: procname
  #   value: KITTING

  - key: cond
    category: CONDITION
    value: "<status-has-hard-faults> ? 'FAULT' : <status-has-soft-faults> ? 'WARNING' : 'NORMAL'"

  - key: msg
    type: MESSAGE
    foo: (none)
    #.
    #   # representation: DATA_SET # set of kv pairs, part2 7.2.2.12 line 1082
    #   # value: Object.entries(<status-faults>).map(([id, fault]) => id + '="' + fault.description + '"').join(' ')
    #   # value: "'msg|' + Object.entries(<status-faults>).map(([id, fault]) => 'f' + id + '=pokpok').join(' ')"
    #   # value: "Object.entries(<status-faults>).map(([id, fault]) => id + ': ' + fault.description).join(', ')"
    #   #. escape any pipes and enclose in double quotes
    #   value: "Object.entries(<status-faults>).map(([id, fault]) => fault.description).join(', ')"
    #   nativeCode: NativeCode #.

  - key: start
    value: <job_start>

  #.
  # - key: complete
  #   value: "<job_complete> ? now() : 'UNAVAILABLE'"

  #. calculate target completion time
  # - key: target
  #   value: '?'

  - key: pkuuid-ref
    value: <part_uuid>

  #.
  # - key: procstate
  #   value:  if <has_current_job> and <current_job_done>         'COMPLETED'
  #           else if <has_current_job> and <first_eye_broken>    'ACTIVE'
  #           else if <has_current_job>                           'READY'
  #           else if not <has_current_job>                       'UNAVAILABLE'

  - key: pgm
    value: <status_program>

  #.
  # - key: cycle
  #   representation: DATA_SET
  #   value: '?'

  # ------------------------------------------------------------------
  # parts
  # ------------------------------------------------------------------
