# outputs

# these outputs are placed in the agent.xml tree and define the
# shdr strings that are calculated from the cache and sent to the agent.

# the item's id in the xml and the shdr key is `${deviceId}/${key}`
# the shdr value is defined with the item value code.

# value is javascript, evaluated by the cache in calculating the shdr output.
# <foo> is a cache lookup, shorthand for cache.get('${deviceId}/foo').value

outputs:
  - key: avail
    value: types.AVAILABILITY[<status-connection>]

  - key: emp
    value: <status-powered>

  # - key: procname
  #   value: KITTING # nowork - needs a cache key to detect a change ehh

  - key: cond
    category: CONDITION
    value: "<status-has-hard-faults> ? 'FAULT' : <status-has-soft-faults> ? 'WARNING' : 'NORMAL'"

  - key: msg
    type: MESSAGE
    # representation: DATA_SET # set of kv pairs, part2 7.2.2.12 line 1082
    # value: Object.entries(<status-faults>).map(([id, fault]) => id + '="' + fault.description + '"').join(' ')
    # value: "'msg|' + Object.entries(<status-faults>).map(([id, fault]) => 'f' + id + '=pokpok').join(' ')"
    # value: "Object.entries(<status-faults>).map(([id, fault]) => id + ': ' + fault.description).join(', ')"
    #. escape any pipes and enclose in double quotes
    value: "Object.entries(<status-faults>).map(([id, fault]) => fault.description).join(', ')"
    nativeCode: NativeCode #.

  - key: state
    value: types.EXECUTION[<status-state>]

  - key: wait_state
    #. what value goes here when status.state is not WAIT?
    value: types.WAIT_STATE[<status-state>]

  - key: pgm
    value: <status-program>
