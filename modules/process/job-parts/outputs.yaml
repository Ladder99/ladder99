# outputs

# these outputs are placed in the module.xml tree and define the
# shdr strings that are calculated from the cache and sent to the agent.

# the item's id in the xml and the shdr key is `${deviceId}-${key}`
# the shdr value is defined with the item value code.

# value is javascript, evaluated by the cache in calculating the shdr output.
# <foo> is a cache lookup, shorthand for cache.get('${deviceId}-foo')

# note: cache keys are ARBITRARY,
# ie not necessarily the same as dataitem id OR name.
# eg <status_step> references the cache value at 'kl1-status_step',
# which was set in inputs.yaml, while the output key here is 'step',
# which becomes eg 'kl1-step' for the SHDR id.
# the idea is to keep the SHDR id's as short as possible, to reduce network bandwidth,
# while the dataitem name can be more descriptive.

# note: category is used to determine shdr representation.
# only need to specify category if CONDITION.
# only need to specify type if is MESSAGE.
# see end of pipeline/adapter/src/cache.js for details.

outputs:
  # ------------------------------------------------------------------
  # device
  # ------------------------------------------------------------------

  - key: avail
    value: types.AVAILABILITY[<status_connection>]

  # functional mode
  # note:
  # has_current_job: "=!!$['%Z61.0']" # converts object to true, undefined to false
  # job_complete: =msg('%Z61.22') === true
  # kits_on: msg('%Z61.5') # number of pieces started for a job
  - key: func
    value: |
      <status_connection>==='online' ? <job_complete> ? 'TEARDOWN' : (<kits_on> > 0) ? 'PRODUCTION' : 'SETUP' : 'UNAVAILABLE'

  - key: cond
    category: CONDITION
    value: |
      <status_connection>==='online' ? <status_has_hard_faults> ? 'FAULT' : <status_has_soft_faults> ? 'WARNING' : 'NORMAL' : 'UNAVAILABLE'

  # ------------------------------------------------------------------
  # controller
  # ------------------------------------------------------------------

  - key: exec
    value: |
      <status_connection>==='online' ? types.EXECUTION[<status_state>] : 'UNAVAILABLE'

  - key: wait
    value: types.WAIT_STATE[<status_state>]

  - key: emp
    value: types.POWER[<status_connection>]

  - key: ctl_pgm
    value: <status_program>

  - key: step
    value: <status_step>

  - key: clk_time
    value: <status_utc_time>

  - key: up
    value: <status_cpu_time>

  - key: fw
    value: <status_build_no>

  - key: msg
    type: MESSAGE
    #. escape any pipes in value
    # value: "Object.values(<status_faults>).map(fault => fault.description).join(', ')"
    # value: |
    #   Object.values(<status_faults>).map(fault => fault.description).join(', ') || 'UNAVAILABLE'
    value: |
      <status_connection>==='online' ? Object.values(<status_faults> || {}).map(fault => fault.description).join(', ') || 'OKAY' : 'UNAVAILABLE'
    nativeCode: NativeCode #. ?

  # ------------------------------------------------------------------
  # process occurrence
  # ------------------------------------------------------------------

  - key: poid
    value: <process_uuid>

  - key: salesord
    value: <salesord>

  - key: purchord
    value: <purchord>

  - key: procname
    value: <procname>

  - key: start
    value: <job_start>

  - key: complete
    value: "<job_complete> ? (new Date().toISOString()) : 'UNAVAILABLE'"

  - key: pkuuid-ref
    value: <part_uuid>

  - key: procstate
    value: |
      <has_current_job> && <job_complete> ? 'COMPLETED' : 
      <has_current_job> && <first_eye_broken> ? 'ACTIVE' :
      <has_current_job> ? 'READY' :
      'UNAVAILABLE'

  # same as path pgm
  - key: pgm
    value: <status_program>

  - key: cycle
    value: <cycle_time>

  - key: cycleavg
    value: <cycle_time_avg>

  - key: cycles
    representation: DATA_SET
    value: <cycle_times>

  - key: target
    value: <target>

  - key: tremain
    value: <time_remaining>

  # ------------------------------------------------------------------
  # part occurrence
  # ------------------------------------------------------------------

  #. ?
  - key: pid
    value: <part_uuid>

  - key: poid-ref
    value: <process_uuid>

  - key: pkuuid
    value: <part_uuid>

  - key: pknum
    value: <job_current>

  - key: pkname
    value: <job_part_name>

  - key: dc
    value: <date_code>

  # partcount_all
  - key: pcall
    value: <pcall>

  - key: pctarg
    value: <carton_quantity>

  - key: pccomp
    value: <pcall>

  - key: pcrem_calc
    value: <pcrem_calc>

  #- key: pcrem_plc
  #  value: <pcrem_plc>

  #- key: pcrem_pr
  #  value: <pcrem_pr>
