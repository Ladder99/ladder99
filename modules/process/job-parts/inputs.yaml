# inputs

# define inputs to cache
# see outputs.yaml for cache outputs to mtconnect agent.

# the ladder99 adapter subscribes to topics from an mqtt broker,
# the mqtt broker sends data from the device(s) to adapter,
# and adapter parses messages, writes values to cache, which may output shdr
# to the mtconnect agent.

# this file is parsed by the adapter driver pipeline/adapter/src/drivers/mqtt-json.js.

# note: cache keys are ARBITRARY,
# ie not necessarily the same as dataitem id OR name.
# eg the 'status_step' key references the cache value at 'kl1-status_step',
# which is set below, while the output key in outputs.yaml is 'step',
# which becomes eg 'kl1-step' for the SHDR id.
# the idea is to keep the SHDR id's as short as possible, to reduce network bandwidth,
# while the dataitem name can be more descriptive.

# define connect handler
connect:
  # subscribe to these topics
  # can use ${deviceId} in topic names
  subscribe:
    - topic: l99/ccs/evt/query
    - topic: l99/ccs/evt/status
    - topic: l99/ccs/evt/read
  # publish an empty message to receive the query response
  publish:
    - topic: l99/ccs/cmd/query
      message: '{}'
  # define any one-time cache values to set
  static:
    # this sets the cache value at eg 'kl1-procname' to 'KITTING'
    procname: KITTING

# define message topic handlers
handlers:
  # ----------------------------------------------------------------------------
  # handle status messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/status:
    # make '$' the message payload dictionary and add faultKeys for quick
    # lookups of faults - payload.faults is a dictionary of faults.
    initialize: '$ = payload; $.faultKeys=Object.keys(payload.faults || {});'
    # define lookup function, which returns a value given some js code.
    lookup: '($, js) => eval(js)'
    # define algorithm to process inputs
    #. explain
    process: iterate_inputs
    # define key-js pairs
    # 'key' is mapped to a cache id, eg 'status_connection' => 'pa1-status_connection'.
    # 'js' is some javascript calculation code to determine its value.
    expressions:
      status_connection: $.connection
      status_build_no: $.build_no
      status_program: $.program
      status_step: $.step
      status_state: $.state
      status_utc_time: $.utc_time
      status_cpu_time: $.cpu_time
      status_faults: $.faults
      status_has_no_faults: $.faultKeys.length === 0
      status_has_faults: $.faultKeys.length > 0
      status_has_soft_faults: $.faultKeys.some(f => f>='50')
      status_has_hard_faults: $.faultKeys.some(f => f<'50')

  # ----------------------------------------------------------------------------
  # handle query messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/query:
    # unsubscribe after getting this message because this just sets the default values -
    # see l99/ccs/evt/read for getting the current values.
    unsubscribe:
      - topic: l99/ccs/evt/query

    # $ is a variable declared as `let $ = {}` before this code is executed.
    # it lets you do quick lookups on the mqtt payload.
    # the payload is an array of items like [{ address, keys, default, value }, ...].
    initialize: 'payload.forEach(item => $[item.address] = item)'

    # accessor to use to get value from message item
    # eg `msg('%M56.1') becomes '(cache, $) => ($['%M56.1'] || {}).default'
    accessor: default

    # algorithm to process inputs
    #. explain
    process: iterate_message_contents

    # define key-code pairs
    # 'key' defines the cache id, with id = {deviceId}-{key}, eg 'pa1-availability'.
    # 'code' defines the part of the payload to get using the above defined
    # lookup fn, eg for code=msg('%I0.0'), the value is obtained with msg('%I0.0').
    # then calls cache.set(id, value), eg cache.set('pa1-availability', 'AVAILABLE').
    # this might trigger SHDR output to be sent to the mtconnect agent,
    # according to the outputs defined in outputs.yaml.
    # the & syntax saves this list for later, as the read message handler
    # uses the same expressions.
    expressions: &queryExpressions
      # --------------------------------------------------------
      # process occurrence
      # --------------------------------------------------------

      # flag for current job meta
      # used in outputs.yaml for funcmode
      # this looks up %Z61.0 in the $ dictionary, which indexes the message addresses
      # this value is true or false, so both will be written to the cache.
      # note: !! is javascript syntax to convert any value from truthy to true/false.
      has_current_job: "!!$['%Z61.0']" # converts object to true, undefined to false

      # get job meta data from kit label
      # this writes a value to the cache at eg key 'kl1-job_meta'.
      # this makes <job_meta> be the json object from the message.
      # if this mqtt message includes address %Z61.0,
      # this will assign its value to job_meta,
      # otherwise value will be undefined, and cache.set will ignore it,
      # leaving any existing value there in the cache.
      # we need to pull out .default OR .value, depending on which handler this is
      # hence the msg lookup function def above.
      job_meta: msg('%Z61.0')

      # NEW-PROCESS: data from skid zpl
      skid_meta: msg('%Z61.17')

      #. how specify printer assoc with this line?
      # need to specify pr1, pr2, pr3, pr4 etc
      # setup.yaml could specify? or part of the xml model?
      # could also name printers as kl1-skid-printer and kl1-kit-printer
      # piece_count_at_print_apply: |
      #   (<job_meta> || {}).carton_quantity - cache.get('pr1-labels_remaining')

      # get value for pctarg/pctarget
      # <foo> is a cache lookup, eg cache.get('kl1-foo')
      # if job_meta is undefined, this expression is undefined, and the cache won't be updated.
      carton_quantity: (<job_meta> || {}).carton_quantity

      # count of kits that have crossed eye1 on conveyer
      # note: if this address is NOT in the current message, the value is undefined,
      # so the cache value is NOT updated.
      #. will this fire if get 50 twice in a row? check code - should ignore duplicates
      kits_on: msg('%Z61.5')

      # count of kits that have crossed eye2 on conveyor
      # kits_off: msg('%Z61.6')
      # NEW-PROCESS - count of kits passed eye-3
      kits_off: msg('%Z61.18')

      # pieces remaining
      pcrem_calc: <carton_quantity> - <kits_off>

      # used in outputs yaml
      first_eye_broken: (<kits_on> > 0)

      # calculate cycle time for kit to go from eye1 to eye2

      # clear the keyvalues dict with cycle times
      # don't care about the cache key here, just want to run the code
      #. instead, could have keyvalues.cycle_times = {}, then use
      # keyvalues.cycle_times[<kits_on>] etc? would garbage collector work ok?
      reset_key_values: '<job_meta> ? Object.keys(keyvalues).forEach(key => delete keyvalues[key]) : undefined'

      # don't care about the cache key here, just want to assign something to keyvalue store
      start_cycle_timer: keyvalues[<kits_on>] = { start:new Date(), end:null, delta:null}

      # get cycle time when kits_off count changes (seconds)
      # note: the expression is prefixed with '(cache, $, keyvalues) =>',
      # so need to return the final value.
      # otherwise, the block would evaluate to its last expression, as in lisp.
      cycle_time: |
        {
          const koff = keyvalues[<kits_off>] || {};
          console.log('koff', koff)
          koff.end = new Date();
          koff.delta = (koff.end - koff.start) * 0.001;
          return koff.delta;
        }

      # calculate average cycle time for current job (seconds)
      # the reference to <kits_off> forces a recalc when that changes.
      # note: dividing by objs.length gives NaN if it's zero, which is okay (?)
      cycle_time_avg: |
        {
          <kits_off>;
          const objs = Object.values(keyvalues);
          const avg = objs
            .filter(obj=>obj.delta>0)
            .reduce((a,b)=>a+b.delta,0) / objs.length;
          return avg;
        }

      # estimate time remaining (seconds)
      time_remaining: <cycle_time_avg> * <pcrem_calc>

      # estimate time of completion (iso datetime)
      # convert jobstart time to milliseconds, add cycletimeavg * npartsremaining, convert to iso string
      # (<cycle_time_avg> && <pcrem_calc>) ? new Date(new Date(<job_start>).getTime() + <time_remaining> * 1000).toISOString() : undefined
      target: |
        <time_remaining> ? new Date(new Date(<job_start>).getTime() + <time_remaining> * 1000).toISOString() : undefined

      # get lastest cycle times to show in dataset, for debugging (seconds)
      # note: the reference to <kits_off> causes this to be recalculated when that changes.
      # note: need :MANUAL in dataset string, otherwise agent holds onto all keyvalue pairs.
      # from cppagent readme:
      #   To clear the set, specify a resetTriggered value such as MANUAL or DAY by preceeding it with a colon : at the beginning of the line.
      #   2014-09-29T23:59:33.460470Z|vars|:MANUAL
      #   This will remove all the values from the current set. The set can also be reset to a specific set of values:
      #   2014-09-29T23:59:33.460470Z|vars|:MANUAL v5=1 v6=2
      #   This will remove all the old values from the set and set the current set.
      cycle_times: |
        {
          <kits_off>;
          const kv = Object.entries(keyvalues);
          const dataitems = kv
            .filter(([key, value]) => value.delta !== null)
            .slice(kv.length - 5)
            .map(([key, value]) => `${key}=${value.delta}`)
            .join(' ');
          return ':MANUAL ' + dataitems;
        }

      # NEW-PROCESS - number of pieces reworked through oven based on eye-2
      pieces_reworked: msg('%Z61.7')

      pieces_in_assembly: <kits_on> - <kits_off> # kits on assy line
      pieces_completed: <kits_off> # kits finished
      pieces_began: <kits_on> # kits work began

      # current job done flag, pieces remaining reached zero
      # need explicit true here, so undefined -> false (undefined would leave this as true)
      # job_complete: msg('%Z61.3') === true
      # NEW-PROCESS - need to look at eye-3 countdown to zero status (t/f)
      job_complete: msg('%Z61.22')

      # kit assembly part number, can be empty string
      job_current: (<job_meta> || {}).kit_number

      job_part_name: (<job_meta> || {}).kit_name

      # compare cache to incoming data
      # this is truthy when get new job_meta values, undefined otherwise
      #. does this go to false? need explicit comparison to get true/false?
      job_changed: <job_meta>

      # assign new uuid's and time on job change
      # returning undefined will leave value the same
      part_uuid: '<job_changed> ? uuid() : undefined'
      process_uuid: '<job_changed> ? uuid() : undefined'
      job_start: '<job_changed> ? new Date().toISOString() : undefined'

      # update sales order if available
      salesord: (<job_meta> || {}).sales_order_number

      #. data coming from skid label, ChrisE needs to define address
      #. is this the salesqueue.dictionary? so multiple purchase orders?
      # use "%Z61.10", "JOB.CURRENT.SALESORDER" to reference correct one?
      # purchord: ($['%Z61.x'] || {}).purchase_order_number
      # purchord: (msg('%Z61.13') || {}).purchase_order
      # NEW-PROCESS - get purchase order info from skid zpl
      #   if skid data is not available then 61.17 will be empty json object {}
      purchord: (<skid_meta> || {}).purchase_order

      # --------------------------------------------------------
      # part occurrences
      # --------------------------------------------------------

      # partcount total done
      pcall: <kits_off>

      # aka dc
      # this returns undefined when no job_meta avail, which is a no-op, so leaves value as is.
      date_code: (<job_meta> || {}).assembly_date

  # ----------------------------------------------------------------------------
  # handle read messages
  # ----------------------------------------------------------------------------
  l99/ccs/evt/read:
    # make $ a dictionary keyed on the item addresses
    initialize: 'payload.forEach(item => $[item.address] = item)'
    # accessor to use to get value from message item
    # eg `msg('%M56.1') becomes '(cache, $) => ($['%M56.1'] || {}).value'
    accessor: value
    # how to process inputs
    #. explain
    process: iterate_message_contents
    # reuse the query expression list here with *, as the key-part pairs are the same
    expressions: *queryExpressions
