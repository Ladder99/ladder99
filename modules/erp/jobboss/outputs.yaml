# outputs

# these outputs are placed in the model.yaml tree and define the
# shdr strings that are calculated from the cache and sent to the agent.

# the item's key (eg 'avail') together with the deviceId (eg 'pa1')
# form its id in the xml (eg 'pa1-avail').
# the shdr key is the same as the id.
# the shdr value is defined with the item value code.

# value is javascript, evaluated by the cache in calculating the shdr output.
# <foo> is a cache lookup, shorthand for cache.get(`${deviceId}-foo`)

# note: cache keys are ARBITRARY,
# ie not necessarily the same as dataitem id OR name.
# eg <status_step> references the cache value at 'kl1-status_step',
# which was set in inputs.yaml, while the output key here is 'step',
# which becomes eg 'kl1-step' for the SHDR id.
# the idea is to keep the SHDR id's as short as possible, to reduce network bandwidth,
# while the dataitem name can be more descriptive.

# note: category is used to determine shdr representation.
# only need to specify category if CONDITION.
# only need to specify type if is MESSAGE.
# see end of services/adapter/src/cache.js for details.

# note: can just specify the key - value will be inferred to be <key>.

outputs:
  - key: avail
    value: <availability>

  - key: job # processes/job/process_aggregate_id-order_number
    value: <job>

  #. when this value transitions to another job, OR to NONE,
  # we want to increment the lifetime job counter for this machine, eg m1-jclife.
  # how do?
  #. or do something like this -
  # if new job value is UNAVAILABLE, ignore
  # otherwise if job value changed, increment jclife for the device.
  # this code gets evaluated like this,
  # where $ is ...?
  #   value = (cache, $, keyvalues) => { ... }
  # deviceId is in scope also
  # value: |
  #   let job = newvalue;
  #   if (job === 'UNAVAILABLE') return job;
  #   if (job != cache.get(`${deviceId}-job`)) {
  #     let key = `${deviceId}-jclife`;
  #     let jclife = cache.get(key) || 0;
  #     jclife++;
  #     cache.set(key, jclife);
  #   }
  #   return job;
  # #. or what if you had this -
  # value: <job>
  # # if job changed to NONE or a new value, increment jclife for the device.
  # onChange: |
  #   if (value === 'UNAVAILABLE') return;
  #   let key = `${deviceId}-jclife`;
  #   let jclife = cache.get(key) || 0;
  #   jclife++;
  #   cache.set(key, jclife);
  #   // <jclife>++

  - key: start # processes/shift/process_time-start
    value: <start>

  - key: complete # processes/shift/process_time-complete
    value: <complete>
