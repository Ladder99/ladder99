#!/bin/bash

usage="
Usage: ./restore FILE

Restore a backup made with pg_dump -Fc over the current database.

WARNING: this deletes all data in the current database!

Example
    ./restore db_2022-02-26_124355.bak
"

# show help
if [ $# -eq 0 ]; then
  echo "$usage"
  exit 1
fi

# read envars
source .env

# set envars
SERVICE=postgres
DATABASE=postgres
USER=postgres
FILE=$1 # eg backup_2022-02-26_122455.bak
FOLDER1=$SETUP/volumes/$SERVICE/backups # eg ../client-oxbox/volumes/postgres/backups
FOLDER2=/var/lib/postgresql/backups # docker volume path - defined in compose.yaml

if [ ! -e "$FILE" ]; then
  echo File $FILE does not exist.
  exit 1
fi  

# move backup file into docker folder temporarily
echo Moving $FILE into Docker volume $FOLDER1...
sudo mv $FILE $FOLDER1/

# # echo Importing $FILE into $DATABASE...
# # import sql to a new database
# cat $FILE | docker exec -i $SERVICE psql -U $USER $DATABASE

# import the database
# -i hooks up input
# -c is command for psql
# <<EOF ... EOF is a bash heredoc string
# psql \c chooses a database
# psql \! runs a shell command
# -Fc is custom format (a compressed archive made by pg_dump)
# see https://docs.timescale.com/timescaledb/latest/how-to-guides/backup-and-restore/pg-dump-and-restore
echo Importing $FILE into $DATABASE...

SQL=<<EOF
\\c $DATABASE
CREATE EXTENSION IF NOT EXISTS timescaledb;
SELECT timescaledb_pre_restore();
\\! pg_restore -Fc -d $DATABASE $FOLDER2/$FILE
SELECT timescaledb_post_restore();
EOF

echo $SQL

docker exec -i $SERVICE psql -U $USER -d $DATABASE -c "$SQL"

# put backup file back
echo Moving $FILE back to original location...
sudo mv $FOLDER1/$FILE $FILE

# # prompt the user for a new password
# #. need this because ?
# docker exec -i $SERVICE psql -U $USER -d $DATABASE -c "\password"

echo Done.
