#!/bin/bash

# run ladder99 pipeline with docker compose.

usage="
Usage: ./start [OPTIONS] SETUP SERVICES

Run the Ladder99 pipeline with a list of services/profiles to include.

SETUP is a client name or setup folder, eg oxbox, or ./setups/vmc.

OPTIONS
  -c, --console   run the services attached to the console for logging

SERVICES      space-delim list of profiles/services to start
  all         run all relevant services for a setup - eg adapter, agent, etc
  adapter     ladder99 adapter - converts machine language to shdr
  agent       mtconnect agent - converts shdr to xml and html (port 5000)
  cloudbeaver database web viewer (port 8978)
  dozzle      docker log file browser (port 8080)
  grafana     ladder99 dashboard - displays database data (port 80)
  pgadmin     manages postgres database (port 5050)
  portainer   manages docker containers (port 9000)
  postgres    ladder99 database with timescaledb extension (port 5432)

Examples
    ./start oxbox all
    ./start ./setups/vmc agent grafana
    ./start oxbox --console play
"

# note: this needs to run as /bin/bash, NOT /bin/sh - led to bug on encabulator
# where it wasn't parsing [[ $setup = .* ]] correctly.
# some discussion here
# https://unix.stackexchange.com/questions/379464/why-does-this-script-work-in-the-terminal-but-not-from-a-file

# show help
if [ $# -eq 0 ]; then
    echo "$usage"
    exit 1
fi

# default values
MODE=startd # detached mode

# get options/arguments
# while $1 starts with '-'
while [[ $1 = \-* ]]
do
    if [ $1 = "-c" ] || [ $1 = "--console" ]; then
        shift
        MODE=start # console mode
    fi
done

# get setup folder
# if starts with '.' treat as a setup folder, else a client name
if [[ $1 = .* ]]; then
    SETUP=$1
else
    SETUP=../client-$1
fi
shift

# get services/profiles
SERVICES=$* # eg 'agent play'

# build command and call it
cmd="export SETUP=$SETUP && shell/pipeline $MODE $SETUP $SERVICES"
echo $cmd
bash -c "$cmd"
