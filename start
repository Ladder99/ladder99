#!/bin/bash

# run ladder99 pipeline with docker compose.

usage="
Usage: ./start [OPTIONS] CLIENT SERVICES

Run the Ladder99 pipeline with a list of services/profiles to include.

OPTIONS
  -c, --console   run the services attached to the console for logging

CLIENT        name of client folder - prepended with '../client-',
              unless starts with './'

SERVICES      space-delim list of profiles/services to start
  dashboard   client-specific profile - typically includes adapter, agent, 
              postgres, grafana, etc
  adapter     ladder99 adapter - converts machine language to shdr
  agent       mtconnect agent - converts shdr to xml and html (port 5000)
  cloudbeaver database web viewer (port 8978)
  dozzle      docker log file browser
  grafana     ladder99 dashboard - displays database data (port 80)
  pgadmin     manages postgres database (port 5050)
  portainer   manages docker containers (port 9000)
  postgres    ladder99 database with timescaledb extension (port 5432)

Examples
    ./start myclient dashboard
    ./start ./setups/micro agent grafana
    ./start --console myclient play dozzle
"

# show help
if [ $# -eq 0 ]; then
    echo "$usage"
    exit 1
fi

# default values
mode=startd # detached mode

# get arguments
# while $1 starts with '-'
while [[ $1 = \-* ]]
do
    if [ $1 = "-c" ] || [ $1 = "--console" ]; then
        shift
        mode=start # console mode
    fi
    # if [ $1 = "-s" ] || [ $1 = "--setup" ]; then
    #     shift
    #     setup=$1 # eg '../client-oxbox' or 'setups/test/micro'
    #     shift
    # fi
done

# get setup folder
# if starts with '.' treat as a setup folder, else a client name
# if [[ $1 = \.* ]]; then
# if [[ $1 == ./* ]]; then
# if [[ "$1" == "."* ]]; then
# if [[ $1 =~ ^\. ]]; then    # works on zsh not encab?
# shopt -s extglob  # not avail on encab?
# if [[ $1 = \.* ]]; then
if [[ $1 = .* ]]; then
    setup=$1
else
    setup=../client-$1
fi
shift

# get services/profiles
services=$* # eg 'agent play'

# build command and call it
cmd="shell/pipeline $mode $setup $services"
echo $cmd
bash -c "$cmd"
