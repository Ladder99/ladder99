#!/bin/bash

repo_root="$(dirname "$(dirname "$(dirname "$(realpath "$0")")")")"

usage="
Usage: l99 build-parallel SERVICE [PLATFORMS]

Build a multiplatform Docker image and push up to Docker hub.
Version is set in .l99_version file.

SERVICE     service name - adapter, meter, relay, etc.
PLATFORMS   platforms to build - leave off for default

Might need to login to Docker Hub first, in order to push image there -

    docker login --username ladder99

Example
    l99 build-parallel adapter
    l99 build-parallel relay
"

# show help if count of params is zero
if [ $# -eq 0 ]; then
    echo "$usage"
    exit
fi

SERVICE=$1
# VERSION=$2
VERSION="$(cat "$repo_root/.l99_version")"
# arm/v7 is 32bit for older pi's
# PLATFORMS=${3:-"linux/amd64,linux/arm64,linux/arm/v7"}
PLATFORMS=${3:-"linux/amd64,linux/arm64"}

USERNAME=ladder99
TAG=$USERNAME/$SERVICE:$VERSION
SERVICE_DIR="$repo_root/services/$SERVICE"

# create a multiplatform buildx builder
# see https://stackoverflow.com/questions/60080264/docker-cannot-build-multi-platform-images-with-docker-buildx
# do this each time, per answer by guy with 200k rep in 2022-02 -
# The easy button is to use the binaries from the multiarch image. This is good in
# CI if you have a dedicated VM (less ideal if you are modifying the host used by
# other builds). However if you reboot, it breaks until you run the container again.
# And it requires you to remember to update it for any upstream patches.
# So I wouldn't recommend it for a long running build host.
docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
docker buildx rm l99builder
docker buildx create --name l99builder --driver docker-container --use
docker buildx inspect --bootstrap

echo "Building an image as specified by the Dockerfile in '$SERVICE_DIR'..."
echo "Platform is" $PLATFORMS
echo "Version is" $VERSION
docker buildx build --tag $TAG --platform $PLATFORMS --push $SERVICE_DIR
