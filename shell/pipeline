#!/bin/bash

# run ladder99 pipeline services with docker compose.
# if docker compose not available, use sh/docker/run and sh/docker/stop.

usage="
Usage: shell/pipeline COMMAND SETUP SERVICES

Run the Ladder99 pipeline with optional list of services to include.

COMMAND   start (run in console), startd (run detached), stop (stop all)
SETUP     setup folder, eg ./setups/vmc
SERVICES  space-delim list of services to start, default all

Examples

    shell/pipeline start
    shell/pipeline start ./setups/print-apply agent
    shell/pipeline start ./setups/print-apply dashboard
    shell/pipeline start ./setups/print-apply dashboard play
    shell/pipeline stop ../client-oxbox

Note: services are referenced by their 'profile' attribute in compose.yaml.
Note: use 'docker stop SERVICE' to stop an individual service.
"

if [ $# -eq 0 ]; then
    echo "$usage"
    exit 1
fi

# get arguments
cmd=$1 # eg 'start', 'startd', 'stop'
setup=$2 # eg './setups/vmc'
shift
shift
services=$* # eg 'agent play'
# services=${*:-"all"} # eg 'agent play'

# file paths
pipeline="services/compose.yaml"
overrides="$setup/compose-overrides.yaml"
envfile="$setup/.env"
# baseEnvfile="setups/.env"

# add main docker compose file for pipeline
args="--file $pipeline"

# add docker compose file for overrides
if [ -e $overrides ]; then
    args="$args --file $overrides"
fi

# add .env file if there
if [ -e $envfile ]; then
    args="$args --env-file $envfile"
else
    echo No .env file found - copying from default...
    cp setups/.env-default $envfile
    echo PLEASE EDIT $envfile, e.g.
    echo nano $envfile
    exit 1
fi

# get profile flags
profileFlags=""
for profile in $services; do
    profileFlags="$profileFlags --profile $profile"
done

# get flags
if [ "$cmd" = "startd" ]; then
    flags="--detach"
fi

# get command and run it
baseCmd="docker-compose $args $profileFlags"
if [ "$cmd" = "start" ] || [ "$cmd" = "startd" ]; then
    # pull any required images in the docker-compose files and start services.
    cmd="$baseCmd pull && $baseCmd up --build $flags"
else
    cmd="$baseCmd down"
fi
echo $cmd
bash -c "export SETUP=$setup && $cmd"

# will end up with a command like
# export SETUP=../client-nis \
#   docker-compose \
#   --file services/compose.yaml \
#   --file ../client-nis/compose-overrides.yaml \
#   --env-file ../client-nis/.env \
#   --profile dashboard \
#   pull && \
#   docker-compose \
#   --file services/compose.yaml \
#   --file ../client-nis/compose-overrides.yaml \
#   --env-file ../client-nis/.env \
#   --profile dashboard \
#   up --build
