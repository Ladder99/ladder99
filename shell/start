#!/bin/bash

# run ladder99 pipeline with docker compose.

usage="
Usage: l99 start [OPTIONS] [SERVICES]

Run the Ladder99 pipeline with a list of services/profiles to include.

OPTIONS is '--offline' to run without trying to pull Docker images.

SERVICES      space-delim list of services or profiles to start
  base        run all relevant services for a setup - eg adapter, agent, etc.
              this is the default.

Examples
    l99 start agent
    l99 start --offline
    l99 start
"

# bug: needed to run this as /bin/bash, NOT /bin/sh - led to bug on encabulator
# where it wasn't parsing [[ $setup = .* ]] correctly.
# some discussion here
# https://unix.stackexchange.com/questions/379464/why-does-this-script-work-in-the-terminal-but-not-from-a-file

# show help if count of params is zero
if [ $# -eq 0 ]; then
    echo "$usage"
    exit 1
fi

# get mode - detached or console
# removed console mode option because hitting ctrl-c stopped ALL other services
MODE=--detach

# handle options
if [ "$1" = "--offline" ]; then
    OFFLINE=true
    shift
fi

# # get setup folder
# # handle example setup specially
# SETUP_NAME=$1
# if [ $1 = example ]; then
#     SETUP=setups/example
# else
#     SETUP=../setup-$1
# fi
# shift
SETUP=$(cat .l99_setup)

# handle missing setup folder
if [ ! -e $SETUP ]; then
    echo Setup folder $SETUP does not exist. Did you forget the setup name?
    echo No setup specified - please run the \'l99 use SETUP\' command.
    echo
    exit 1
fi

# if no services specified, default to 'base', which should run the main services
if [ $# -eq 0 ]; then
    SERVICES=base
else
    SERVICES=$* # eg 'agent adapter'
fi

# file paths
# COMPOSE=$L99_HOME/services/compose.yaml
# COMPOSE=services/compose.yaml
# OVERRIDES=$SETUP/compose-overrides.yaml
COMPOSE=docker-compose.yaml
OVERRIDES=$SETUP/docker-compose.yaml
ENVFILE=$SETUP/.env
ENVFILE_EXAMPLE=$SETUP/.env-example

# specify docker compose files
ARGS="--file $COMPOSE"
if [ -e $OVERRIDES ]; then
    ARGS="$ARGS --file $OVERRIDES"
fi

# add environment variable file
# if [ $SETUP = "setups/example" ]; then
#     # for the example setup just use the .env-example file directly
#     # ARGS="$ARGS --env-file $ENVFILE_EXAMPLE"
#     cp $ENVFILE_EXAMPLE $ENVFILE
# fi
if [ -e $ENVFILE ]; then
    # use .env file if there
    ARGS="$ARGS --env-file $ENVFILE"
elif [ $SETUP_NAME = "example" ]; then
    # copy the example .env file and use that
    cp $ENVFILE_EXAMPLE $ENVFILE
    ARGS="$ARGS --env-file $ENVFILE"
else
    # otherwise create a new .env file and stop
    echo No .env file found - copying from default...
    cp $ENVFILE_EXAMPLE $ENVFILE
    echo
    echo PLEASE SET INITIAL PASSWORDS IN .env FILE -
    echo For example, run \'nano $ENVFILE\', set the Grafana and Postgres passwords,
    echo then re-run the \'l99 start\' command. 
    echo
    exit 1
fi

# get profile flags - one per service/profile specified
PROFILE_FLAGS=""
for PROFILE in $SERVICES; do
    PROFILE_FLAGS="$PROFILE_FLAGS --profile $PROFILE"
done

# make command and run it

# base cmd
# note: -p specifies project name, as shown in docker management consoles - 
# otherwise it uses the parent folder name (ie 'services').
BASE_CMD="docker-compose --project-name ladder99 $ARGS $PROFILE_FLAGS"
# BASE_CMD="MSYS_NO_PATHCONV=1 docker-compose --project-name ladder99 $ARGS $PROFILE_FLAGS"

# pull cmd
PULL_CMD="$BASE_CMD pull"

# run cmd
RUN_CMD="$BASE_CMD up --build $MODE"

# pull any required images in the docker-compose files and start services.
if [ "$OFFLINE" = "true" ]; then
    CMD="$RUN_CMD"
else
    CMD="$PULL_CMD && 
$RUN_CMD"
fi

# echo "$CMD"
# bash -c "$CMD"

FULL_CMD="export SETUP=$SETUP && 
$CMD"
echo "$FULL_CMD"
bash -c "$FULL_CMD"

echo
echo Run \'l99 list\' to check status of services.
