#!/bin/bash
# install docker
# see https://docs.docker.com/engine/install/debian/
# and https://docs.docker.com/compose/install/

# install and upgrade docker
curl -sSL https://get.docker.com | sudo sh
sudo apt upgrade -y docker

# allow user to run docker - else need `sudo docker ...`
sudo usermod -aG docker $USER
newgrp docker # activate group
newgrp $USER # go back to original group

# start docker service

# Docker Engine starts automatically on DEB-based distributions. 
#. On RPM-based distributions, you need to start it manually using 
# the appropriate systemctl or service command.
# On Debian and Ubuntu, the Docker service is configured to start on 
# boot by default. To automatically start Docker and Containerd on boot 
# for other distros, use the commands below:
# sudo systemctl enable docker.service
# sudo systemctl enable containerd.service


# install docker-compose

# The new docker compose command is not yet included in docker for linux.
# Docker Compose is normally installed from pre-built binaries, 
# downloaded from the GitHub release page for the project. 
# Sadly, those are not available for the ARM architecture. We can 
# however install Docker Compose from pip.

# Use this for linux-x86:
# eg $(uname -s)-$(uname -m) gives Linux-armv7l on my raspberrypi 4
# sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# sudo chmod +x /usr/local/bin/docker-compose

# Use this for alpine linux:
# sudo apt install py-pip python3-dev libffi-dev openssl-dev gcc libc-dev rust cargo make
# sudo pip3 install docker-compose

# Use this for debian/ubuntu:
sudo pip3 install docker-compose
